[INFO -- 2018-10-06 21:56:59]
Starting flip_value script
version: 1.1
[INFO -- 2018-10-06 21:56:59]
Initialization strings:
[INFO -- 2018-10-06 21:56:59]
(1) file /tmp/lreg/lreg
[INFO -- 2018-10-06 21:56:59]
(2) set args /tmp/lreg/randInput /tmp/lreg/output
[INFO -- 2018-10-06 21:56:59]
initSignal:0
[INFO -- 2018-10-06 21:56:59]
endSignal:10
[INFO -- 2018-10-06 21:56:59]
faultModel:2
[EXCEPTION -- 2018-10-06 21:57:01]
gdbException: Cannot access memory at address 0x401be87d52242e90
[INFO -- 2018-10-06 21:57:01]
Backtrace BEGIN:
#0  0x0000555555556354 in std::vector<double, std::allocator<double> >::operator= (this=0x401be87d52242e80, __x=<error reading variable: Cannot access memory at address 0x40711fa1f54890c2>) at /usr/include/c++/7/bits/vector.tcc:179
#1  0x00005555555558c7 in train (iterations=60000, N=3, stopsWhenStable=true) at lreg.cpp:163
#2  0x0000555555555dba in main (argc=3, argv=0x7fffffffde68) at lreg.cpp:225

174	      return __first;
175	    }
176	
177	  template<typename _Tp, typename _Alloc>
178	    vector<_Tp, _Alloc>&
179	    vector<_Tp, _Alloc>::
180	    operator=(const vector<_Tp, _Alloc>& __x)
181	    {
182	      if (&__x != this)
183		{

Backtrace END
Memory content before bitflip:0x2d0x430x1c0xeb0xe20x360x0a0x3f
Fault Model: Random bit-flip
base address to flip value: 0x55555575a198 
address max offset: 8
Memory content after  bitflip:0xac0x340xf30x590x0f0xe10xdf0xc4
frame name: main
symbol name: a1
symbol filename: lreg.cpp
symbol line: 45
value: -6.0217993827253879e+23
value address: 0x55555575a198 <a1>
Type: A floating point type.
Type sizeof: 8

[INFO -- 2018-10-06 21:57:01]
Fault Injection Successful after 2.3134539127349854s
[INFO -- 2018-10-06 21:57:09]
event type: exit
[INFO -- 2018-10-06 21:57:09]
exit code: 0
