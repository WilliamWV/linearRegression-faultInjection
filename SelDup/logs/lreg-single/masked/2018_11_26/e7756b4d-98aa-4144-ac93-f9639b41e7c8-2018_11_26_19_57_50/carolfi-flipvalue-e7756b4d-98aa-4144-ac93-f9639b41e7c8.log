[INFO -- 2018-11-26 19:57:47]
Starting flip_value script
version: 1.1
[INFO -- 2018-11-26 19:57:47]
Initialization strings:
[INFO -- 2018-11-26 19:57:47]
(1) file /tmp/lreg/lreg
[INFO -- 2018-11-26 19:57:47]
(2) set args /tmp/lreg/randInput /tmp/lreg/output
[INFO -- 2018-11-26 19:57:47]
initSignal:0
[INFO -- 2018-11-26 19:57:47]
endSignal:3
[INFO -- 2018-11-26 19:57:47]
faultModel:0
[EXCEPTION -- 2018-11-26 19:57:47]
pythonException: Unable to exit loop in struct fields; Exiting wihtout making a bit flip
[INFO -- 2018-11-26 19:57:48]
Backtrace BEGIN:
#0  0x00005555555551e0 in verifyUintDup (a=1, b=1) at lreg.cpp:69
#1  0x000055555555579a in predict (v=-21) at lreg.cpp:116
#2  0x0000555555555a53 in partialDerivate (pos1=1, pos2=1) at lreg.cpp:142
#3  0x0000555555555bbe in adjust (alpha1=5.0000000000000002e-05, alpha2=5.0000000000000002e-05) at lreg.cpp:156
#4  0x0000555555555ee0 in train (iter1=20000, iter2=20000, N=3, alpha1=5.0000000000000002e-05, alpha2=5.0000000000000002e-05, stopsWhenStable=true) at lreg.cpp:193
#5  0x0000555555556467 in main (argc=3, argv=0x7fffffffde58) at lreg.cpp:253

64			ofstream fp ("/tmp/lreg/detected.log", std::ofstream::app);
65			fp << "verifyUint: a = "<<a<<"; b = "<<b<<endl;
66	        detected = 1;	
67		}
68		return a;
69	}
70	double verifyDoubleDup(double a, double b){
71		if (a != b && detected != 1){
72			//gerar entrada no log
73			ofstream fp ("/tmp/lreg/detected.log", std::ofstream::app);

Backtrace END
Memory content before bitflip:0xfe0xa60x7c0xf00x6e0x250x4f0x40
Fault Model: Single bit-flip
base address to flip value: 0x7fffffffd728
address max offset: 8
Memory content after  bitflip:0xfe0xa60x7c0xf00x6e0x250x4d0x40
frame name: partialDerivate
symbol name: pD
symbol filename: lreg.cpp
symbol line: 139
value: 58.292448101868999
value address: 0x7fffffffd728
Type: A floating point type.
Type sizeof: 8

[INFO -- 2018-11-26 19:57:48]
Fault Injection Successful after 1.0580089092254639s
[INFO -- 2018-11-26 19:57:50]
event type: exit
[INFO -- 2018-11-26 19:57:50]
exit code: 0
