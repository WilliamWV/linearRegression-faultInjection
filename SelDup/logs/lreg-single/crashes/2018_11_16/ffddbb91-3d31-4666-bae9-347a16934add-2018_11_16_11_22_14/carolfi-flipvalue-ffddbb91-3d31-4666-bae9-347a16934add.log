[INFO -- 2018-11-16 11:22:11]
Starting flip_value script
version: 1.1
[INFO -- 2018-11-16 11:22:11]
Initialization strings:
[INFO -- 2018-11-16 11:22:11]
(1) file /tmp/lreg/lreg
[INFO -- 2018-11-16 11:22:11]
(2) set args /tmp/lreg/randInput /tmp/lreg/output
[INFO -- 2018-11-16 11:22:11]
initSignal:0
[INFO -- 2018-11-16 11:22:11]
endSignal:5
[INFO -- 2018-11-16 11:22:11]
faultModel:0
[INFO -- 2018-11-16 11:22:13]
Backtrace BEGIN:
#0  0x00005555555550fe in verifyUintDup (a=1, b=1) at lreg.cpp:61
#1  0x000055555555576f in predict (v=-16) at lreg.cpp:115
#2  0x0000555555555a53 in partialDerivate (pos1=1, pos2=1) at lreg.cpp:142
#3  0x0000555555555bbe in adjust (alpha1=2.2222199999999999e-05, alpha2=2.2222199999999999e-05) at lreg.cpp:156
#4  0x0000555555555ee0 in train (iter1=45000, iter2=45000, N=4, alpha1=2.2222199999999999e-05, alpha2=2.2222199999999999e-05, stopsWhenStable=true) at lreg.cpp:193
#5  0x0000555555556467 in main (argc=3, argv=0x7fffffffde58) at lreg.cpp:253

56	*/
57	
58	int detected = 0;
59	
60	
61	UINT verifyUintDup(UINT a, UINT b){
62		if (a != b && detected != 1){
63			//gerar entrada no log
64			ofstream fp ("/tmp/lreg/detected.log", std::ofstream::app);
65			fp << "verifyUint: a = "<<a<<"; b = "<<b<<endl;

Backtrace END
Fliping value of field: std::_Vector_base<double, std::allocator<double> >
Fliping value of field: _M_impl
Fliping value of field: _M_finish
Fliping a bit of the pointer
Memory content before bitflip:0xa00x230x770x550x550x550x000x00
Fault Model: Single bit-flip
base address to flip value: 0x55555575b188 
address max offset: 8
Memory content after  bitflip:0xa00x230xf70x550x550x550x000x00
frame name: predict
symbol name: T1
symbol filename: lreg.cpp
symbol line: 36
value: std::vector of length 1048580, capacity 4 = {0.00045859718085331912, -0.2366842842738888, -3.9734054099575697, -1.959914076948396, 0, 4.001931731314097e-322, 0, 1.5810100666919889e-322, 2.1219957904712067e-314, 7.2316388581783257e-320, 0, 0, 0, 0, 0, 7.1639518646980749e-322, 0, 31, 18, -23, 27, -16, -8, 1, -29, -8, 25, -10, -23, -17, -29, -12, 0, 7.1639518646980749e-322, 4.6355706480215905e-310, -63607, -13063, 22361, -42439, 7269, 821, -7, 45593, 821, -33895, 1665, 22361, 8777, 45593, 2957, 0, 1.6304166312761136e-322, 4.6355706480136855e-310, 1.9985469836383658, 1.9984390114061754, 1.6304166312761136e-322, 4.6355706480389816e-310, 1.9985469836383658, 1.9984390114061754, 1.6304166312761136e-322, 4.6355706480405627e-310, 1.9985495362183032, 1.9985212198479456, 1.6304166312761136e-322, 0, 1.9985469836383658, 1.9984390114061754, 5.5829417980060859e-322, 0, 838, 58, 262, 2, -2, 2, 218, 58, 362, 218, 758, 2776, 1.3487992131466031e-321, -16, 31, 18, -23, 27, -16, -8, 1, -29, -8, 25, -10, -23, -17, -29, -12, -89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.3487992131466031e-321, 7269, -63607, -13063, 22361, -42439, 7269, 821, -7, 45593, 821, -33895, 1665, 22361, 8777, 45593, 2957, 12476, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.4209216646221081e-322, 0.00045859718085331912, -0.2366842842738888, -3.9734054099575697, -1.959914076948396, 0, 2.4209216646221081e-322, 0.00018850676530731279, -0.2366842842738888, -3.9734054099575697, -1.959914076948396, 0, 2.4209216646221081e-322, 0.00039049710304650792, -0.24015156863663034, -3.9702692837000044, -2.0556157884328856, 0, 2.4209216646221081e-322, 4.6355706480840404e-310, -0.24015156863663034, -3.9702692837000044, -2.0556157884328856, 0, 2.4209216646221081e-322, 0, -0.2366842842738888, -3.9734054099575697, -1.959914076948396, 0, 2.1114883506317354e-319, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0...}
value address: 0x55555575b180 <T1>
Type: The type is a structure.
Type sizeof: 24
Field name: std::_Vector_base<double, std::allocator<double> >
Field Type: The type is a structure.
Field Type sizeof: 24

[INFO -- 2018-11-16 11:22:13]
Fault Injection Successful after 2.962721347808838s
[INFO -- 2018-11-16 11:22:14]
event type: exit
[EXCEPTION -- 2018-11-16 11:22:14]
exit code: no exit code available
