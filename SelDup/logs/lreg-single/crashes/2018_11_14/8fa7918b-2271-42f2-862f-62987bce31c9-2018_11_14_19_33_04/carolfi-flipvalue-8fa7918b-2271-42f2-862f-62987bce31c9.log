[INFO -- 2018-11-14 19:33:00]
Starting flip_value script
version: 1.1
[INFO -- 2018-11-14 19:33:00]
Initialization strings:
[INFO -- 2018-11-14 19:33:00]
(1) file /tmp/lreg/lreg
[INFO -- 2018-11-14 19:33:00]
(2) set args /tmp/lreg/randInput /tmp/lreg/output
[INFO -- 2018-11-14 19:33:00]
initSignal:0
[INFO -- 2018-11-14 19:33:00]
endSignal:5
[INFO -- 2018-11-14 19:33:00]
faultModel:0
[EXCEPTION -- 2018-11-14 19:33:02]
pythonException: empty range for randrange() (0,0, 0)
[EXCEPTION -- 2018-11-14 19:33:02]
pythonException: Unable to exit loop in struct fields; Exiting wihtout making a bit flip
[EXCEPTION -- 2018-11-14 19:33:02]
pythonException: empty range for randrange() (0,0, 0)
[INFO -- 2018-11-14 19:33:03]
Backtrace BEGIN:
#0  0x00005555555557b4 in predict (v=-3) at lreg.cpp:116
#1  0x0000555555555928 in meanSquaredError () at lreg.cpp:128
#2  0x0000555555555ee5 in train (iter1=45000, iter2=45000, N=4, alpha1=2.2222199999999999e-05, alpha2=2.2222199999999999e-05, stopsWhenStable=true) at lreg.cpp:194
#3  0x0000555555556467 in main (argc=3, argv=0x7fffffffde68) at lreg.cpp:253

111	*/
112	double predict(double v){
113		double val = 0;
114		
115		for(UINT i1 = 0, i2 = 0; verifyUintDup(i1, i2)<T1.size(); i1++, i2++){
116			val+= (verifyDoubleDup(T1[verifyUintDup(i1, i2)], T2[verifyUintDup(i1, i2)]) * pow(v, verifyUintDup(i1, i2)));
117		}
118		return val;
119		
120	}

Backtrace END
Fliping value of field: std::_Vector_base<double, std::allocator<double> >
Fliping value of field: _M_impl
Fliping value of field: _M_start
Fliping a bit of the pointer
Memory content before bitflip:0x300x280x770x550x550x550x000x00
Fault Model: Single bit-flip
base address to flip value: 0x55555575b1a0 
address max offset: 8
Memory content after  bitflip:0x300x200x770x550x550x550x000x00
frame name: train
symbol name: T2
symbol filename: lreg.cpp
symbol line: 37
value: std::vector of length 260, capacity 260 = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4.001931731314097e-322, 4.635570648017638e-310, 1.5810100666919889e-322, -13.000007629394529, 3.2418096202366926e+178, 25.00000001238384, 17, -15, -11, -44, 1.6304166312761136e-322, 4.6355706480358196e-310, -4.0008301338538734, 2.9970281245240793, 1.6304166312761136e-322, 4.6355706480374006e-310, -4.0008050352690043, 2.9972017191452993, 2.4209216646221081e-322, 0.013782894826728556, 0.083438292520433638, -0.24090439369402636, 0.032422544016584037, 0, 4.001931731314097e-322, 0, 1.5810100666919889e-322, 2.1219957904712067e-314, 1.5927950145422402e-317, 0, 0, 0, 0, 0, 7.1639518646980749e-322, 0, 24, -13, -27, 5, 30, -2, -4, 1, 12, -30, 5, -3, -3, -23, 5, 0, 7.1639518646980749e-322, 4.6355706480215905e-310, -14256, 1950, 18792, -120, -27720, -8, 24, 4, -1800, 25920, -120, 0, 0, 11500, -120, 0, 1.6304166312761136e-322, 4.6355706480136855e-310, -4.0008301338538734, 2.9970281245240793, 1.6304166312761136e-322, 4.6355706480389816e-310, -4.0008301338538734, 2.9970281245240793, 1.6304166312761136e-322, 4.6355706480405627e-310, -4.0008050352690043, 2.9972017191452993, 1.6304166312761136e-322, 0, -4.0008301338538734, 2.9970281245240793, 5.5829417980060859e-322, 0, 221, -3, 1537, 796, 1492, 1117, 52, 529, 61, 404, 1, 6588, 1.3487992131466031e-321, 13, 24, -13, -27, 5, 30, -2, -4, 1, 12, -30, 5...}
value address: 0x55555575b1a0 <T2>
Type: The type is a structure.
Type sizeof: 24
Field name: std::_Vector_base<double, std::allocator<double> >
Field Type: The type is a structure.
Field Type sizeof: 24

[INFO -- 2018-11-14 19:33:03]
Fault Injection Successful after 3.091858386993408s
[INFO -- 2018-11-14 19:33:03]
event type: exit
[EXCEPTION -- 2018-11-14 19:33:03]
exit code: no exit code available
