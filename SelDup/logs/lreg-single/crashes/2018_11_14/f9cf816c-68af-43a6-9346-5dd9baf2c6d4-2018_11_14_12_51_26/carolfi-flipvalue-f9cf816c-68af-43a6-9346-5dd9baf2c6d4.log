[INFO -- 2018-11-14 12:51:20]
Starting flip_value script
version: 1.1
[INFO -- 2018-11-14 12:51:20]
Initialization strings:
[INFO -- 2018-11-14 12:51:20]
(1) file /tmp/lreg/lreg
[INFO -- 2018-11-14 12:51:20]
(2) set args /tmp/lreg/randInput /tmp/lreg/output
[INFO -- 2018-11-14 12:51:20]
initSignal:0
[INFO -- 2018-11-14 12:51:20]
endSignal:5
[INFO -- 2018-11-14 12:51:20]
faultModel:0
[INFO -- 2018-11-14 12:51:22]
Backtrace BEGIN:
#0  0x00005555555557dc in predict (v=-14) at lreg.cpp:116
#1  0x0000555555555a53 in partialDerivate (pos1=2, pos2=2) at lreg.cpp:142
#2  0x0000555555555bbe in adjust (alpha1=2.2222199999999999e-05, alpha2=2.2222199999999999e-05) at lreg.cpp:156
#3  0x0000555555555ee0 in train (iter1=45000, iter2=45000, N=4, alpha1=2.2222199999999999e-05, alpha2=2.2222199999999999e-05, stopsWhenStable=true) at lreg.cpp:193
#4  0x0000555555556467 in main (argc=3, argv=0x7fffffffde68) at lreg.cpp:253

111	*/
112	double predict(double v){
113		double val = 0;
114		
115		for(UINT i1 = 0, i2 = 0; verifyUintDup(i1, i2)<T1.size(); i1++, i2++){
116			val+= (verifyDoubleDup(T1[verifyUintDup(i1, i2)], T2[verifyUintDup(i1, i2)]) * pow(v, verifyUintDup(i1, i2)));
117		}
118		return val;
119		
120	}

Backtrace END
Fliping value of field: std::_Vector_base<double, std::allocator<double> >
Fliping value of field: _M_impl
Fliping value of field: _M_start
Fliping a bit of the pointer
Memory content before bitflip:0x900x280x770x550x550x550x000x00
Fault Model: Single bit-flip
base address to flip value: 0x7fffffffd830
address max offset: 8
Memory content after  bitflip:0x900x200x770x550x550x550x000x00
frame name: train
symbol name: bestT
symbol filename: lreg.cpp
symbol line: 188
value: std::vector of length 260, capacity 260 = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4.001931731314097e-322, 4.635570648017638e-310, 1.5810100666919889e-322, 6.0000038146972647, 3.2419828481788971e+178, 8.0000000061919199, 10, -9, -12, 9, 1.6304166312761136e-322, 4.6355706480358196e-310, 1.0084851577629446, 2.9972886793366258, 1.6304166312761136e-322, 4.6355706480374006e-310, 1.0085135394379481, 2.9975228575449195, 2.4209216646221081e-322, -0.18858172599156384, 0.093318499304870281, -4.9881611610854124, -2.9414271539158823, 0, 4.001931731314097e-322, 0, 1.5810100666919889e-322, 2.1219957904712067e-314, 1.6251741007080921e-317, 0, 0, 0, 0, 0, 7.1639518646980749e-322, 0, 27, -22, 21, 18, -24, -25, 18, 5, -19, -11, 30, 17, -2, -14, -31, 0, 7.1639518646980749e-322, 4.6355706480215905e-310, -62526, 29398, -29856, -19002, 38454, 43606, -19002, -464, 18664, 3328, -85314, -16076, -2, 7174, 84388, 0, 1.6304166312761136e-322, 4.6355706480136855e-310, 1.0084851577629446, 2.9972886793366258, 1.6304166312761136e-322, 4.6355706480389816e-310, 1.0084851577629446, 2.9972886793366258, 1.6304166312761136e-322, 4.6355706480405627e-310, 1.0085135394379481, 2.9975228575449195, 1.6304166312761136e-322, 0, 1.0084851577629446, 2.9972886793366258, 5.5829417980060859e-322, 0, 1472, 952, 882, 50, 750, 1750, 882, 658, 952, 600, 492, 9448, 1.3487992131466031e-321, 28, 27, -22, 21, 18, -24, -25, 18, 5, -19, -11, 30, 17, -2, -14, -31, 16, 0, 0, 0, 0, 0, 0, 0...}
value address: 0x7fffffffd830
Type: The type is a structure.
Type sizeof: 24
Field name: std::_Vector_base<double, std::allocator<double> >
Field Type: The type is a structure.
Field Type sizeof: 24

[INFO -- 2018-11-14 12:51:22]
Fault Injection Successful after 2.356873035430908s
[INFO -- 2018-11-14 12:51:25]
event type: exit
[EXCEPTION -- 2018-11-14 12:51:25]
exit code: no exit code available
