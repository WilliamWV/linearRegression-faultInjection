[INFO -- 2018-11-15 13:46:12]
Starting flip_value script
version: 1.1
[INFO -- 2018-11-15 13:46:12]
Initialization strings:
[INFO -- 2018-11-15 13:46:12]
(1) file /tmp/lreg/lreg
[INFO -- 2018-11-15 13:46:12]
(2) set args /tmp/lreg/randInput /tmp/lreg/output
[INFO -- 2018-11-15 13:46:12]
initSignal:0
[INFO -- 2018-11-15 13:46:12]
endSignal:5
[INFO -- 2018-11-15 13:46:12]
faultModel:0
[INFO -- 2018-11-15 13:46:15]
Backtrace BEGIN:
#0  0x000055555555582b in predict (v=-27) at lreg.cpp:115
#1  0x00005555555558c0 in meanSquaredError () at lreg.cpp:128
#2  0x0000555555555ee5 in train (iter1=45000, iter2=45000, N=4, alpha1=2.2222199999999999e-05, alpha2=2.2222199999999999e-05, stopsWhenStable=true) at lreg.cpp:194
#3  0x0000555555556467 in main (argc=3, argv=0x7fffffffde58) at lreg.cpp:253

110		Predicts the value related to v using the Ts variables
111	*/
112	double predict(double v){
113		double val = 0;
114		
115		for(UINT i1 = 0, i2 = 0; verifyUintDup(i1, i2)<T1.size(); i1++, i2++){
116			val+= (verifyDoubleDup(T1[verifyUintDup(i1, i2)], T2[verifyUintDup(i1, i2)]) * pow(v, verifyUintDup(i1, i2)));
117		}
118		return val;
119		

Backtrace END
Fliping value of field: std::_Vector_base<double, std::allocator<double> >
Fliping value of field: _M_impl
Fliping value of field: _M_finish
Fliping a bit of the pointer
Memory content before bitflip:0xa00x230x770x550x550x550x000x00
Fault Model: Single bit-flip
base address to flip value: 0x55555575b188 
address max offset: 8
Memory content after  bitflip:0xa00x230x770x750x550x550x000x00
frame name: meanSquaredError
symbol name: T1
symbol filename: lreg.cpp
symbol line: 36
value: std::vector of length 67108868, capacity 4 = {0.14816383666545646, 0.65090420146624006, 1.9928297857708168, 6.0559319090931831, 0, 4.001931731314097e-322, 0, 1.5810100666919889e-322, 2.1219957904712067e-314, 6.5992348315015301e-320, 0, 0, 0, 0, 0, 7.1639518646980749e-322, 0, -32, 0, 15, -28, -11, 31, -15, 8, -8, 6, 3, -26, -25, -19, -27, 0, 7.1639518646980749e-322, 4.6355706480215905e-310, -194650, 6, 20751, -130222, -7771, 180767, -19839, 3230, -2962, 1392, 195, -104176, -92569, -40483, -116715, 0, 1.6304166312761136e-322, 4.6355706480136855e-310, 0.049601778351678956, 2.9920241268444561, 1.6304166312761136e-322, 4.6355706480389816e-310, 0.049601778351678956, 2.9920241268444561, 1.6304166312761136e-322, 4.6355706480405627e-310, 0.049589741456833154, 2.9919283723899781, 1.6304166312761136e-322, 0, 0.049601778351678956, 2.9920241268444561, 5.5829417980060859e-322, 0, 23, 359, 143, 1448, 23, 584, 71, 188, 863, 671, 143, 5019, 1.3487992131466031e-321, 7, -32, 0, 15, -28, -11, 31, -15, 8, -8, 6, 3, -26, -25, -19, -27, -121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.3487992131466031e-321, 2183, -194650, 6, 20751, -130222, -7771, 180767, -19839, 3230, -2962, 1392, 195, -104176, -92569, -40483, -116715, -500863, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.4209216646221081e-322, 0.14816383666545646, 0.65090420146624006, 1.9928297857708168, 6.0559319090931831, 0, 2.4209216646221081e-322, 0.1486934784972288, 0.64715998241227157, 2.0070190271293518, 5.9495231195664235, 0, 2.4209216646221081e-322, 0.14815889664231385, 0.65087507447969184, 1.9928296895451718, 6.0559319428802176, 0, 2.4209216646221081e-322, 4.6355706480840404e-310, 0.65087507447969184, 1.9928296895451718, 6.0559319428802176, 0, 2.4209216646221081e-322, 0, 0.64715998241227157, 2.0070190271293518, 5.9495231195664235, 0, 2.1114883506317354e-319, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0...}
value address: 0x55555575b180 <T1>
Type: The type is a structure.
Type sizeof: 24
Field name: std::_Vector_base<double, std::allocator<double> >
Field Type: The type is a structure.
Field Type sizeof: 24

[INFO -- 2018-11-15 13:46:15]
Fault Injection Successful after 3.617223024368286s
[INFO -- 2018-11-15 13:46:15]
event type: exit
[EXCEPTION -- 2018-11-15 13:46:15]
exit code: no exit code available
