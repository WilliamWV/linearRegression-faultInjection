[INFO -- 2018-11-26 17:40:05]
Starting flip_value script
version: 1.1
[INFO -- 2018-11-26 17:40:05]
Initialization strings:
[INFO -- 2018-11-26 17:40:05]
(1) file /tmp/lreg/lreg
[INFO -- 2018-11-26 17:40:05]
(2) set args /tmp/lreg/randInput /tmp/lreg/output
[INFO -- 2018-11-26 17:40:05]
initSignal:0
[INFO -- 2018-11-26 17:40:05]
endSignal:3
[INFO -- 2018-11-26 17:40:05]
faultModel:0
[INFO -- 2018-11-26 17:40:07]
Backtrace BEGIN:
#0  0x0000555555555337 in verifyDoubleDup (a=-4.0448050301174554, b=-4.0448050301174554) at lreg.cpp:78
#1  0x00005555555557ea in predict (v=-14) at lreg.cpp:116
#2  0x00005555555558c0 in meanSquaredError () at lreg.cpp:128
#3  0x0000555555555ee5 in train (iter1=30000, iter2=30000, N=4, alpha1=2.2222199999999999e-05, alpha2=2.2222199999999999e-05, stopsWhenStable=true) at lreg.cpp:194
#4  0x0000555555556467 in main (argc=3, argv=0x7fffffffde58) at lreg.cpp:253

73			ofstream fp ("/tmp/lreg/detected.log", std::ofstream::app);
74			fp << "verifyDouble: a = "<<a<<"; b = "<<b<<endl;
75	        detected = 1;	
76		}	
77		return a;
78	}
79	
80	
81	void verifyChecksum(vector<double> vec){
82		if(detected!=1){

Backtrace END
Fliping value of field: std::_Vector_base<double, std::allocator<double> >
Fliping value of field: _M_impl
Fliping value of field: _M_finish
Fliping a bit of the pointer
Memory content before bitflip:0xa00x230x770x550x550x550x000x00
Fault Model: Single bit-flip
base address to flip value: 0x55555575b188 
address max offset: 8
Memory content after  bitflip:0xa00x230x760x550x550x550x000x00
frame name: predict
symbol name: T1
symbol filename: lreg.cpp
symbol line: 36
value: std::vector of length -8188, capacity 4 = {0.20695752385693955, -1.0091789694498334, -1.9553335527395186, -4.0448050301174554, 0, 4.001931731314097e-322, 0, 1.5810100666919889e-322, 2.1219957904712067e-314, 6.3482494834141768e-320, 0, 0, 0, 0, 0, 7.1639518646980749e-322, 0, -9, -1, 29, 5, -18, 31, -16, -18, -28, 25, -14, 7, -2, -17, 21, 0, 7.1639518646980749e-322, 4.6355706480215905e-310, 2813, 13, -99407, -575, 22793, -121267, 15973, 22793, 86413, -63895, 10673, -1507, 41, 19181, -38047, 0, 1.6304166312761136e-322, 4.6355706480136855e-310, -0.018636480386081677, -2.9944537928979051, 1.6304166312761136e-322, 4.6355706480389816e-310, -0.018636480386081677, -2.9944537928979051, 1.6304166312761136e-322, 4.6355706480405627e-310, -0.018629603636086151, -2.9945863353366149, 1.6304166312761136e-322, 0, -0.018636480386081677, -2.9944537928979051, 5.5829417980060859e-322, 0, -23, -143, -8, 1, 1, -1319, -23, -1079, -503, -104, -1583, -4827, 1.3487992131466031e-321, -15, -9, -1, 29, 5, -18, 31, -16, -18, -28, 25, -14, 7, -2, -17, 21, -20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.3487992131466031e-321, 13145, 2813, 13, -99407, -575, 22793, -121267, 15973, 22793, 86413, -63895, 10673, -1507, 41, 19181, -38047, -130860, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.4209216646221081e-322, 0.20695752385693955, -1.0091789694498334, -1.9553335527395186, -4.0448050301174554, 0, 2.4209216646221081e-322, 0.20720758233807748, -1.006380652928651, -1.9459032801223359, -3.9701848781398805, 0, 2.4209216646221081e-322, 0.20692642234907732, -1.0090887800565502, -1.9553327629342809, -4.0448051645962915, 0, 2.4209216646221081e-322, 4.6355706480840404e-310, -1.0090887800565502, -1.9553327629342809, -4.0448051645962915, 0, 2.4209216646221081e-322, 0, -1.006380652928651, -1.9459032801223359, -3.9701848781398805, 0, 2.1114883506317354e-319, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0...}
value address: 0x55555575b180 <T1>
Type: The type is a structure.
Type sizeof: 24
Field name: std::_Vector_base<double, std::allocator<double> >
Field Type: The type is a structure.
Field Type sizeof: 24

[INFO -- 2018-11-26 17:40:07]
Fault Injection Successful after 2.514968156814575s
[INFO -- 2018-11-26 17:40:07]
event type: exit
[EXCEPTION -- 2018-11-26 17:40:07]
exit code: no exit code available
