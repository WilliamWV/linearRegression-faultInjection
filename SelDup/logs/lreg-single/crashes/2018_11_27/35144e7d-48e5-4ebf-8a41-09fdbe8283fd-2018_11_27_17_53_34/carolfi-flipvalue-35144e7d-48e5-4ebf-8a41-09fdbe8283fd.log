[INFO -- 2018-11-27 17:53:29]
Starting flip_value script
version: 1.1
[INFO -- 2018-11-27 17:53:29]
Initialization strings:
[INFO -- 2018-11-27 17:53:29]
(1) file /tmp/lreg/lreg
[INFO -- 2018-11-27 17:53:29]
(2) set args /tmp/lreg/randInput /tmp/lreg/output
[INFO -- 2018-11-27 17:53:29]
initSignal:0
[INFO -- 2018-11-27 17:53:29]
endSignal:3
[INFO -- 2018-11-27 17:53:29]
faultModel:0
[EXCEPTION -- 2018-11-27 17:53:31]
pythonException: empty range for randrange() (0,0, 0)
[INFO -- 2018-11-27 17:53:31]
Backtrace BEGIN:
#0  predict (v=1.0439794892390947e-309) at lreg.cpp:115
#1  0x0000555555555928 in meanSquaredError () at lreg.cpp:128
#2  0x0000555555555ee5 in train (iter1=30000, iter2=30000, N=4, alpha1=2.2222199999999999e-05, alpha2=2.2222199999999999e-05, stopsWhenStable=true) at lreg.cpp:194
#3  0x0000555555556467 in main (argc=3, argv=0x7fffffffde58) at lreg.cpp:253

110		Predicts the value related to v using the Ts variables
111	*/
112	double predict(double v){
113		double val = 0;
114		
115		for(UINT i1 = 0, i2 = 0; verifyUintDup(i1, i2)<T1.size(); i1++, i2++){
116			val+= (verifyDoubleDup(T1[verifyUintDup(i1, i2)], T2[verifyUintDup(i1, i2)]) * pow(v, verifyUintDup(i1, i2)));
117		}
118		return val;
119		

Backtrace END
Fliping value of field: std::_Vector_base<double, std::allocator<double> >
Fliping value of field: _M_impl
Fliping value of field: _M_finish
Fliping a bit of the pointer
Memory content before bitflip:0xa80x270x770x550x550x550x000x00
Fault Model: Single bit-flip
base address to flip value: 0x55555575b168 
address max offset: 8
Memory content after  bitflip:0xa80x270x770x550x550x550x000x01
frame name: predict
symbol name: y
symbol filename: lreg.cpp
symbol line: 35
value: std::vector of length 9007199254741009, capacity 32 = {13145, 2813, 13, -99407, -575, 22793, -121267, 15973, 22793, 86413, -63895, 10673, -1507, 41, 19181, -38047, -130860, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.4209216646221081e-322, nan(0x8000000000000), nan(0x8000000000000), -nan(0x8000000000000), nan(0x8000000000000), 0, 2.4209216646221081e-322, nan(0x8000000000000), nan(0x8000000000000), -nan(0x8000000000000), nan(0x8000000000000), 0, 2.4209216646221081e-322, 0.082159717628318057, -0.6456337075115417, -1.9521509696207608, -4.0453470926134489, 0, 2.4209216646221081e-322, 4.6355706480840404e-310, nan(0x8000000000000), -nan(0x8000000000000), nan(0x8000000000000), 0, 2.4209216646221081e-322, 0, nan(0x8000000000000), -nan(0x8000000000000), nan(0x8000000000000), 0, 2.7717082731693931e-321, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4.6355706475749552e-310, 2.1219957904712067e-314, 0, 0, 4.635570648097479e-310, -nan(0xfffffffffffff), 0, 4.6355706480982695e-310, 0, 0, 0, 0, 0, 0, 6.9533484736004504e-310, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6.953348473534048e-310, 2.0838206744646255e-319, 9.7004990591569926e+227, 1.0218458465130071e-152, 2.0459104361345165e-153, 5.0404992326647556e+223, 4.9406564584124654e-323, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0...}
value address: 0x55555575b160 <y>
Type: The type is a structure.
Type sizeof: 24
Field name: std::_Vector_base<double, std::allocator<double> >
Field Type: The type is a structure.
Field Type sizeof: 24

[INFO -- 2018-11-27 17:53:31]
Fault Injection Successful after 2.5667002201080322s
[INFO -- 2018-11-27 17:53:34]
event type: exit
[EXCEPTION -- 2018-11-27 17:53:34]
exit code: no exit code available
