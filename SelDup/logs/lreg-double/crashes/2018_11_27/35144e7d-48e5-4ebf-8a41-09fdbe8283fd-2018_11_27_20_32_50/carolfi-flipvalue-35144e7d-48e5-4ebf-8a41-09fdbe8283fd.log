[INFO -- 2018-11-27 20:32:48]
Starting flip_value script
version: 1.1
[INFO -- 2018-11-27 20:32:48]
Initialization strings:
[INFO -- 2018-11-27 20:32:48]
(1) file /tmp/lreg/lreg
[INFO -- 2018-11-27 20:32:48]
(2) set args /tmp/lreg/randInput /tmp/lreg/output
[INFO -- 2018-11-27 20:32:48]
initSignal:0
[INFO -- 2018-11-27 20:32:48]
endSignal:3
[INFO -- 2018-11-27 20:32:48]
faultModel:1
[EXCEPTION -- 2018-11-27 20:32:49]
gdbException: Cannot access memory at address 0x505555772490
[EXCEPTION -- 2018-11-27 20:32:49]
gdbException: Cannot access memory at address 0x505555772490
[INFO -- 2018-11-27 20:32:49]
Backtrace BEGIN:
#0  0x0000555555555a78 in partialDerivate (pos1=2, pos2=2) at lreg.cpp:142
#1  0x0000555555555bbe in adjust (alpha1=5.0000000000000002e-05, alpha2=5.0000000000000002e-05) at lreg.cpp:156
#2  0x0000555555555ee0 in train (iter1=20000, iter2=20000, N=3, alpha1=5.0000000000000002e-05, alpha2=5.0000000000000002e-05, stopsWhenStable=true) at lreg.cpp:193
#3  0x0000555555556467 in main (argc=3, argv=0x7fffffffde58) at lreg.cpp:253

137	*/
138	double partialDerivate(UINT pos1, UINT pos2){
139		double pD = 0;
140		
141		for(UINT i1 = 0, i2 = 0; verifyUintDup(i1, i2)<(x.size() - 1); i1++, i2++){
142			pD += ((predict(x[verifyUintDup(i1, i2)]) - y[verifyUintDup(i1, i2)])*pow(x[verifyUintDup(i1, i2)], verifyUintDup(pos1, pos2)));	
143		}
144		pD *= (2.0/(x.size() - 1));
145		return pD;
146	}

Backtrace END
Memory content before bitflip:0x620x160xce0x360x0c0xce0xe10xbe
Fault Model: Double bit-flip
base address to flip value: 0x7fffffffd788
address max offset: 8
Memory content after  bitflip:0x620x160xce0x360x0c0xce0xe20xbe
frame name: adjust
symbol name: diff
symbol filename: lreg.cpp
symbol line: 158
value: -8.9668626175418079e-06
value address: 0x7fffffffd788
Type: A floating point type.
Type sizeof: 8

[INFO -- 2018-11-27 20:32:49]
Fault Injection Successful after 1.5208806991577148s
[INFO -- 2018-11-27 20:32:49]
event type: exit
[EXCEPTION -- 2018-11-27 20:32:49]
exit code: no exit code available
