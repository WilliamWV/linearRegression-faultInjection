[INFO -- 2018-11-27 17:12:43]
Starting flip_value script
version: 1.1
[INFO -- 2018-11-27 17:12:43]
Initialization strings:
[INFO -- 2018-11-27 17:12:43]
(1) file /tmp/lreg/lreg
[INFO -- 2018-11-27 17:12:43]
(2) set args /tmp/lreg/randInput /tmp/lreg/output
[INFO -- 2018-11-27 17:12:43]
initSignal:0
[INFO -- 2018-11-27 17:12:43]
endSignal:3
[INFO -- 2018-11-27 17:12:43]
faultModel:1
[EXCEPTION -- 2018-11-27 17:12:44]
gdbException: Cannot access memory at address 0xc555555772490
[INFO -- 2018-11-27 17:12:44]
Backtrace BEGIN:
#0  verifyDoubleDup (a=-2.9909245865558964, b=-2.9909245865558964) at lreg.cpp:70
#1  0x00005555555557ea in predict (v=-3) at lreg.cpp:116
#2  0x00005555555558c0 in meanSquaredError () at lreg.cpp:128
#3  0x0000555555555ee5 in train (iter1=20000, iter2=20000, N=3, alpha1=5.0000000000000002e-05, alpha2=5.0000000000000002e-05, stopsWhenStable=true) at lreg.cpp:194
#4  0x0000555555556467 in main (argc=3, argv=0x7fffffffde58) at lreg.cpp:253

65			fp << "verifyUint: a = "<<a<<"; b = "<<b<<endl;
66	        detected = 1;	
67		}
68		return a;
69	}
70	double verifyDoubleDup(double a, double b){
71		if (a != b && detected != 1){
72			//gerar entrada no log
73			ofstream fp ("/tmp/lreg/detected.log", std::ofstream::app);
74			fp << "verifyDouble: a = "<<a<<"; b = "<<b<<endl;

Backtrace END
Memory content before bitflip:0x790x7b0x1b0x660x320x730x200x40
Fault Model: Double bit-flip
base address to flip value: 0x7fffffffd7f8
address max offset: 8
Memory content after  bitflip:0x3d0x7b0x1b0x660x320x730x200x40
frame name: train
symbol name: MSE
symbol filename: lreg.cpp
symbol line: 190
value: 8.224993887762702
value address: 0x7fffffffd7f8
Type: A floating point type.
Type sizeof: 8

[INFO -- 2018-11-27 17:12:44]
Fault Injection Successful after 1.8638529777526855s
[INFO -- 2018-11-27 17:12:45]
event type: exit
[EXCEPTION -- 2018-11-27 17:12:45]
exit code: no exit code available
