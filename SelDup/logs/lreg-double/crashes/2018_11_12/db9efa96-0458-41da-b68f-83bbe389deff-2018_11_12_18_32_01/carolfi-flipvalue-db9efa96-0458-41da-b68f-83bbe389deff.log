[INFO -- 2018-11-12 18:31:56]
Starting flip_value script
version: 1.1
[INFO -- 2018-11-12 18:31:56]
Initialization strings:
[INFO -- 2018-11-12 18:31:56]
(1) file /tmp/lreg/lreg
[INFO -- 2018-11-12 18:31:56]
(2) set args /tmp/lreg/randInput /tmp/lreg/output
[INFO -- 2018-11-12 18:31:56]
initSignal:0
[INFO -- 2018-11-12 18:31:56]
endSignal:10
[INFO -- 2018-11-12 18:31:56]
faultModel:1
[EXCEPTION -- 2018-11-12 18:31:59]
pythonException: empty range for randrange() (0,0, 0)
[INFO -- 2018-11-12 18:31:59]
Backtrace BEGIN:
#0  0x0000555555555254 in verifyDoubleDup (a=8.2730646023394865, b=8.2730646023394865) at lreg.cpp:71
#1  0x00005555555556bd in predict (v=11) at lreg.cpp:113
#2  0x000055555555591a in partialDerivate (pos1=2, pos2=2) at lreg.cpp:139
#3  0x0000555555555a81 in adjust (alpha1=5.0000000000000002e-05, alpha2=5.0000000000000002e-05) at lreg.cpp:153
#4  0x0000555555555da3 in train (iter1=30000, iter2=30000, N=3, alpha1=5.0000000000000002e-05, alpha2=5.0000000000000002e-05, stopsWhenStable=true) at lreg.cpp:190
#5  0x00005555555562e6 in main (argc=3, argv=0x7fffffffde68) at lreg.cpp:246

66	        detected = 1;	
67		}
68		return a;
69	}
70	double verifyDoubleDup(double a, double b){
71		if (a != b && detected != 1){
72			//gerar entrada no log
73			ofstream fp ("/tmp/lreg/detected.log", std::ofstream::app);
74			fp << "verifyDouble: a = "<<a<<"; b = "<<b<<endl;
75	        detected = 1;	

Backtrace END
Memory content before bitflip:0x000x000x000x00
Fault Model: Double bit-flip
base address to flip value: 0x55555575b1c8 
address max offset: 4
Memory content after  bitflip:0x410x000x000x00
frame name: train
symbol name: detected
symbol filename: lreg.cpp
symbol line: 58
value: 65
value address: 0x55555575b1c8 <detected>
Type: The type is an integer type.
Type sizeof: 4

[INFO -- 2018-11-12 18:31:59]
Fault Injection Successful after 3.430344820022583s
[INFO -- 2018-11-12 18:32:00]
event type: exit
[EXCEPTION -- 2018-11-12 18:32:00]
exit code: no exit code available
