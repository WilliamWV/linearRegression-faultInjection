[INFO -- 2018-11-12 19:40:48]
Starting flip_value script
version: 1.1
[INFO -- 2018-11-12 19:40:48]
Initialization strings:
[INFO -- 2018-11-12 19:40:48]
(1) file /tmp/lreg/lreg
[INFO -- 2018-11-12 19:40:48]
(2) set args /tmp/lreg/randInput /tmp/lreg/output
[INFO -- 2018-11-12 19:40:48]
initSignal:0
[INFO -- 2018-11-12 19:40:48]
endSignal:10
[INFO -- 2018-11-12 19:40:48]
faultModel:1
[EXCEPTION -- 2018-11-12 19:40:49]
pythonException: Unable to exit loop in struct fields; Exiting wihtout making a bit flip
[EXCEPTION -- 2018-11-12 19:40:49]
pythonException: Unable to exit loop in struct fields; Exiting wihtout making a bit flip
[INFO -- 2018-11-12 19:40:49]
Backtrace BEGIN:
#0  verifyUintDup (a=2, b=2) at lreg.cpp:68
#1  0x00005555555556d1 in predict (v=-7) at lreg.cpp:113
#2  0x000055555555591a in partialDerivate (pos1=2, pos2=2) at lreg.cpp:139
#3  0x0000555555555a81 in adjust (alpha1=5.0000000000000002e-05, alpha2=5.0000000000000002e-05) at lreg.cpp:153
#4  0x0000555555555da3 in train (iter1=30000, iter2=30000, N=3, alpha1=5.0000000000000002e-05, alpha2=5.0000000000000002e-05, stopsWhenStable=true) at lreg.cpp:190
#5  0x00005555555562e6 in main (argc=3, argv=0x7fffffffde68) at lreg.cpp:246

63			//gerar entrada no log
64			ofstream fp ("/tmp/lreg/detected.log", std::ofstream::app);
65			fp << "verifyUint: a = "<<a<<"; b = "<<b<<endl;
66	        detected = 1;	
67		}
68		return a;
69	}
70	double verifyDoubleDup(double a, double b){
71		if (a != b && detected != 1){
72			//gerar entrada no log

Backtrace END
Fliping value of field: std::_Vector_base<double, std::allocator<double> >
Fliping value of field: _M_impl
Fliping value of field: _M_finish
Fliping a bit of the pointer
Memory content before bitflip:0x780x230x770x550x550x550x000x00
Fault Model: Double bit-flip
base address to flip value: 0x7fffffffd828
address max offset: 8
Memory content after  bitflip:0x6c0x230x770x550x550x550x000x00
frame name: train
symbol name: prevT
symbol filename: lreg.cpp
symbol line: 184
value: std::vector of length 1, capacity 3 = {-5.1348355383535305, -2.7240665361606813, 2.517076517302554, 2.4209216646221081e-322, 0, 15, 6, 6, 0, 4.001931731314097e-322, 4.635570648008152e-310, 1.5810100666919889e-322, 6.0000038146972647, 6.0000000033308414, -8, -7, 3, 14, 0, 4.001931731314097e-322, 0, 1.5810100666919889e-322, 6.0000038146972647, 6.0002028942238192, -8, -7, 3, 14, 0, 1.6304166312761136e-322, -5.1352312464893659, -2.7240785051411991, 2.517076517302554, 1.6304166312761136e-322, -5.1348355383535305, -2.7240665361606813, 2.517076517302554, 1.6304166312761136e-322, 4.6355706480302861e-310, -2.7240725573440763, 2.5169979692107494, 1.6304166312761136e-322, 0, -2.7240665361606813, 2.517076517302554, 7.1639518646980749e-322, 0, 15, 6, 6, -8, -7, 3, 14, 1082, 506, 107, 674, 587, 866, 191, 767, 0, 1.3487992131466031e-321, -11, 15, 6, 6, -8, -7, 3, 14, 19, 13, 6, -15, -14, 17, -8, -16, -13, 15, -10, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.3487992131466031e-321, -11, 15, 6, 6, -8, -7, 3, 14, 1082, 506, 107, 674, 587, 866, 191, 767, 506, 674, 299, 299, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.1320414814987312e-319, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0...}
value address: 0x7fffffffd820
Type: The type is a structure.
Type sizeof: 24
Field name: std::_Vector_base<double, std::allocator<double> >
Field Type: The type is a structure.
Field Type sizeof: 24

[INFO -- 2018-11-12 19:40:49]
Fault Injection Successful after 1.6838605403900146s
[INFO -- 2018-11-12 19:40:55]
event type: exit
[EXCEPTION -- 2018-11-12 19:40:55]
exit code: no exit code available
