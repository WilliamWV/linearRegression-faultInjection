[INFO -- 2018-11-27 21:27:43]
Starting flip_value script
version: 1.1
[INFO -- 2018-11-27 21:27:43]
Initialization strings:
[INFO -- 2018-11-27 21:27:43]
(1) file /tmp/lreg/lreg
[INFO -- 2018-11-27 21:27:43]
(2) set args /tmp/lreg/randInput /tmp/lreg/output
[INFO -- 2018-11-27 21:27:43]
initSignal:0
[INFO -- 2018-11-27 21:27:43]
endSignal:3
[INFO -- 2018-11-27 21:27:43]
faultModel:1
[EXCEPTION -- 2018-11-27 21:27:43]
gdbException: Attempt to dereference a generic pointer.
[INFO -- 2018-11-27 21:27:44]
Backtrace BEGIN:
#0  0x000055555555573f in predict (v=-9) at lreg.cpp:112
#1  0x00005555555558c0 in meanSquaredError () at lreg.cpp:128
#2  0x0000555555555ee5 in train (iter1=30000, iter2=30000, N=4, alpha1=2.2222199999999999e-05, alpha2=2.2222199999999999e-05, stopsWhenStable=true) at lreg.cpp:194
#3  0x0000555555556467 in main (argc=3, argv=0x7fffffffde58) at lreg.cpp:253

107	}
108	
109	/**
110		Predicts the value related to v using the Ts variables
111	*/
112	double predict(double v){
113		double val = 0;
114		
115		for(UINT i1 = 0, i2 = 0; verifyUintDup(i1, i2)<T1.size(); i1++, i2++){
116			val+= (verifyDoubleDup(T1[verifyUintDup(i1, i2)], T2[verifyUintDup(i1, i2)]) * pow(v, verifyUintDup(i1, i2)));

Backtrace END
Fliping value of field: std::_Vector_base<double, std::allocator<double> >
Fliping value of field: _M_impl
Fliping value of field: _M_finish
Fliping a bit of the pointer
Memory content before bitflip:0xa00x230x770x550x550x550x000x00
Fault Model: Double bit-flip
base address to flip value: 0x55555575b188 
address max offset: 8
Memory content after  bitflip:0xa00x3b0x770x550x550x550x000x00
frame name: train
symbol name: T1
symbol filename: lreg.cpp
symbol line: 36
value: std::vector of length 772, capacity 4 = {-0.07333232896851323, -0.18840863355476892, -1.9481437915556929, -4.0460289249779535, 0, 4.001931731314097e-322, 0, 1.5810100666919889e-322, 2.1219957904712067e-314, 6.3482494834141768e-320, 0, 0, 0, 0, 0, 7.1639518646980749e-322, 0, -9, -1, 29, 5, -18, 31, -16, -18, -28, 25, -14, 7, -2, -17, 21, 0, 7.1639518646980749e-322, 4.6355706480215905e-310, 2813, 13, -99407, -575, 22793, -121267, 15973, 22793, 86413, -63895, 10673, -1507, 41, 19181, -38047, 0, 1.6304166312761136e-322, 4.6355706480136855e-310, -0.018636480386081677, -2.9944537928979051, 1.6304166312761136e-322, 4.6355706480389816e-310, -0.018636480386081677, -2.9944537928979051, 1.6304166312761136e-322, 4.6355706480405627e-310, -0.018629603636086151, -2.9945863353366149, 1.6304166312761136e-322, 0, -0.018636480386081677, -2.9944537928979051, 5.5829417980060859e-322, 0, -23, -143, -8, 1, 1, -1319, -23, -1079, -503, -104, -1583, -4827, 1.3487992131466031e-321, -15, -9, -1, 29, 5, -18, 31, -16, -18, -28, 25, -14, 7, -2, -17, 21, -20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.3487992131466031e-321, 13145, 2813, 13, -99407, -575, 22793, -121267, 15973, 22793, 86413, -63895, 10673, -1507, 41, 19181, -38047, -130860, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.4209216646221081e-322, -0.07333232896851323, -0.18840863355476892, -1.9481437915556929, -4.0460289249779535, 0, 2.4209216646221081e-322, -0.073084585440854236, -0.18560314881556969, -1.9387133918187822, -3.9714087847044226, 0, 2.4209216646221081e-322, -0.07336778734536871, -0.18830384927917315, -1.948142746969413, -4.0460290832289916, 0, 2.4209216646221081e-322, 4.6355706480840404e-310, -0.18830384927917315, -1.948142746969413, -4.0460290832289916, 0, 2.4209216646221081e-322, 0, -0.18560314881556969, -1.9387133918187822, -3.9714087847044226, 0, 2.1114883506317354e-319, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0...}
value address: 0x55555575b180 <T1>
Type: The type is a structure.
Type sizeof: 24
Field name: std::_Vector_base<double, std::allocator<double> >
Field Type: The type is a structure.
Field Type sizeof: 24

[INFO -- 2018-11-27 21:27:44]
Fault Injection Successful after 1.9155750274658203s
