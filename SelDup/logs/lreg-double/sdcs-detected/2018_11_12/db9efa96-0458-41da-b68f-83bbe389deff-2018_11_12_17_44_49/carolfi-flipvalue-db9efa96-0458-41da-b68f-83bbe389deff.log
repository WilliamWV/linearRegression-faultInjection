[INFO -- 2018-11-12 17:44:32]
Starting flip_value script
version: 1.1
[INFO -- 2018-11-12 17:44:32]
Initialization strings:
[INFO -- 2018-11-12 17:44:32]
(1) file /tmp/lreg/lreg
[INFO -- 2018-11-12 17:44:32]
(2) set args /tmp/lreg/randInput /tmp/lreg/output
[INFO -- 2018-11-12 17:44:32]
initSignal:0
[INFO -- 2018-11-12 17:44:32]
endSignal:10
[INFO -- 2018-11-12 17:44:32]
faultModel:1
[INFO -- 2018-11-12 17:44:38]
Backtrace BEGIN:
#0  0x0000555555556648 in std::vector<double, std::allocator<double> >::size (this=0x55555575b180 <T1>) at /usr/include/c++/7/bits/stl_vector.h:671
#1  0x0000555555555650 in predict (v=28) at lreg.cpp:112
#2  0x000055555555591a in partialDerivate (pos1=2, pos2=2) at lreg.cpp:139
#3  0x0000555555555a81 in adjust (alpha1=2.2222199999999999e-05, alpha2=2.2222199999999999e-05) at lreg.cpp:153
#4  0x0000555555555da3 in train (iter1=45000, iter2=45000, N=4, alpha1=2.2222199999999999e-05, alpha2=2.2222199999999999e-05, stopsWhenStable=true) at lreg.cpp:190
#5  0x00005555555562e6 in main (argc=3, argv=0x7fffffffde68) at lreg.cpp:246

666	
667	      // [23.2.4.2] capacity
668	      /**  Returns the number of elements in the %vector.  */
669	      size_type
670	      size() const _GLIBCXX_NOEXCEPT
671	      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
672	
673	      /**  Returns the size() of the largest possible %vector.  */
674	      size_type
675	      max_size() const _GLIBCXX_NOEXCEPT

Backtrace END
Memory content before bitflip:0x460x5a0xb70xf40x390x4d0xf70x3e
Fault Model: Double bit-flip
base address to flip value: 0x7fffffffd7e8
address max offset: 8
Memory content after  bitflip:0x460xd20xb70xf40x390x4d0xf70x3e
frame name: train
symbol name: alpha1
symbol filename: lreg.cpp
symbol line: 174
value: 2.2222200000104082e-05
value address: 0x7fffffffd7e8
Type: A floating point type.
Type sizeof: 8

[INFO -- 2018-11-12 17:44:38]
Fault Injection Successful after 6.833009243011475s
[INFO -- 2018-11-12 17:44:48]
event type: exit
[INFO -- 2018-11-12 17:44:48]
exit code: 0
