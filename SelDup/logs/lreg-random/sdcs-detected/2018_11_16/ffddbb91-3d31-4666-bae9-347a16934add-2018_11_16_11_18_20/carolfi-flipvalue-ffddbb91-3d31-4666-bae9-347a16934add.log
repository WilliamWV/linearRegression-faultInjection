[INFO -- 2018-11-16 11:18:10]
Starting flip_value script
version: 1.1
[INFO -- 2018-11-16 11:18:10]
Initialization strings:
[INFO -- 2018-11-16 11:18:10]
(1) file /tmp/lreg/lreg
[INFO -- 2018-11-16 11:18:10]
(2) set args /tmp/lreg/randInput /tmp/lreg/output
[INFO -- 2018-11-16 11:18:10]
initSignal:0
[INFO -- 2018-11-16 11:18:10]
endSignal:5
[INFO -- 2018-11-16 11:18:10]
faultModel:2
[INFO -- 2018-11-16 11:18:13]
Backtrace BEGIN:
#0  0x00005555555567ba in std::vector<double, std::allocator<double> >::size (this=0x55555575b180 <T1>) at /usr/include/c++/7/bits/stl_vector.h:671
#1  0x000055555555577d in predict (v=10) at lreg.cpp:115
#2  0x0000555555555a53 in partialDerivate (pos1=1, pos2=1) at lreg.cpp:142
#3  0x0000555555555bbe in adjust (alpha1=5.0000000000000002e-05, alpha2=5.0000000000000002e-05) at lreg.cpp:156
#4  0x0000555555555ee0 in train (iter1=30000, iter2=30000, N=3, alpha1=5.0000000000000002e-05, alpha2=5.0000000000000002e-05, stopsWhenStable=true) at lreg.cpp:193
#5  0x0000555555556467 in main (argc=3, argv=0x7fffffffde58) at lreg.cpp:253

666	
667	      // [23.2.4.2] capacity
668	      /**  Returns the number of elements in the %vector.  */
669	      size_type
670	      size() const _GLIBCXX_NOEXCEPT
671	      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
672	
673	      /**  Returns the size() of the largest possible %vector.  */
674	      size_type
675	      max_size() const _GLIBCXX_NOEXCEPT

Backtrace END
Memory content before bitflip:0x2d0x430x1c0xeb0xe20x360x0a0x3f
Fault Model: Random bit-flip
base address to flip value: 0x7fffffffd7c8
address max offset: 8
Memory content after  bitflip:0x6c0x210xc70x900x1a0x580x050x6b
frame name: train
symbol name: alpha1
symbol filename: lreg.cpp
symbol line: 177
value: 3.4263048671438364e+207
value address: 0x7fffffffd7c8
Type: A floating point type.
Type sizeof: 8

[INFO -- 2018-11-16 11:18:13]
Fault Injection Successful after 3.922100305557251s
[INFO -- 2018-11-16 11:18:19]
event type: exit
[INFO -- 2018-11-16 11:18:19]
exit code: 0
