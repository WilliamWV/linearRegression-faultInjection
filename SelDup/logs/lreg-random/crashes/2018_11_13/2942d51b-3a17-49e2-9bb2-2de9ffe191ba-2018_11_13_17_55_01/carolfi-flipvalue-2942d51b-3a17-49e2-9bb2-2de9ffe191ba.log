[INFO -- 2018-11-13 17:54:51]
Starting flip_value script
version: 1.1
[INFO -- 2018-11-13 17:54:51]
Initialization strings:
[INFO -- 2018-11-13 17:54:51]
(1) file /tmp/lreg/lreg
[INFO -- 2018-11-13 17:54:51]
(2) set args /tmp/lreg/randInput /tmp/lreg/output
[INFO -- 2018-11-13 17:54:51]
initSignal:0
[INFO -- 2018-11-13 17:54:51]
endSignal:5
[INFO -- 2018-11-13 17:54:51]
faultModel:2
[EXCEPTION -- 2018-11-13 17:54:53]
pythonException: empty range for randrange() (0,0, 0)
[INFO -- 2018-11-13 17:54:54]
Backtrace BEGIN:
#0  std::_Vector_base<double, std::allocator<double> >::_M_get_Tp_allocator (this=0x7fffffffd860) at /usr/include/c++/7/bits/stl_vector.h:116
#1  0x0000555555556a13 in std::vector<double, std::allocator<double> >::vector (this=0x7fffffffd860, __x=std::vector of length 3, capacity 3 = {...}) at /usr/include/c++/7/bits/stl_vector.h:333
#2  0x0000555555555f47 in train (iter1=30000, iter2=30000, N=3, alpha1=5.0000000000000002e-05, alpha2=5.0000000000000002e-05, stopsWhenStable=true) at lreg.cpp:199
#3  0x0000555555556467 in main (argc=3, argv=0x7fffffffde58) at lreg.cpp:253

111	    public:
112	      typedef _Alloc allocator_type;
113	
114	      _Tp_alloc_type&
115	      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
116	      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
117	
118	      const _Tp_alloc_type&
119	      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
120	      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }

Backtrace END
Memory content before bitflip:0x030x000x000x00
Fault Model: Random bit-flip
base address to flip value: 0x7fffffffd8e0
address max offset: 4
Memory content after  bitflip:0x160x0e0xb60x9b
frame name: main
symbol name: N
symbol filename: lreg.cpp
symbol line: 236
value: 2612399638
value address: 0x7fffffffd8e0
Type: The type is an integer type.
Type sizeof: 4

[INFO -- 2018-11-13 17:54:54]
Fault Injection Successful after 3.282881259918213s
[INFO -- 2018-11-13 17:55:00]
event type: exit
[EXCEPTION -- 2018-11-13 17:55:00]
exit code: no exit code available
