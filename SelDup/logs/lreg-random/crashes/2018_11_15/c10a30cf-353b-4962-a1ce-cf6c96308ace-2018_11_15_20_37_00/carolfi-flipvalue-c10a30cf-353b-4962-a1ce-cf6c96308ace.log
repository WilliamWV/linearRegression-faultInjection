[INFO -- 2018-11-15 20:36:57]
Starting flip_value script
version: 1.1
[INFO -- 2018-11-15 20:36:57]
Initialization strings:
[INFO -- 2018-11-15 20:36:57]
(1) file /tmp/lreg/lreg
[INFO -- 2018-11-15 20:36:57]
(2) set args /tmp/lreg/randInput /tmp/lreg/output
[INFO -- 2018-11-15 20:36:57]
initSignal:0
[INFO -- 2018-11-15 20:36:57]
endSignal:5
[INFO -- 2018-11-15 20:36:57]
faultModel:2
[INFO -- 2018-11-15 20:37:00]
Backtrace BEGIN:
#0  0x0000555555555218 in verifyUintDup (a=11, b=11) at lreg.cpp:69
#1  0x0000555555555a31 in partialDerivate (pos1=1, pos2=1) at lreg.cpp:142
#2  0x0000555555555bbe in adjust (alpha1=2.2222199999999999e-05, alpha2=2.2222199999999999e-05) at lreg.cpp:156
#3  0x0000555555555ee0 in train (iter1=45000, iter2=45000, N=4, alpha1=2.2222199999999999e-05, alpha2=2.2222199999999999e-05, stopsWhenStable=true) at lreg.cpp:193
#4  0x0000555555556467 in main (argc=3, argv=0x7fffffffde68) at lreg.cpp:253

64			ofstream fp ("/tmp/lreg/detected.log", std::ofstream::app);
65			fp << "verifyUint: a = "<<a<<"; b = "<<b<<endl;
66	        detected = 1;	
67		}
68		return a;
69	}
70	double verifyDoubleDup(double a, double b){
71		if (a != b && detected != 1){
72			//gerar entrada no log
73			ofstream fp ("/tmp/lreg/detected.log", std::ofstream::app);

Backtrace END
Fliping value of field: std::_Vector_base<double, std::allocator<double> >
Fliping value of field: _M_impl
Fliping value of field: _M_finish
Fliping a bit of the pointer
Memory content before bitflip:0xa00x230x770x550x550x550x000x00
Fault Model: Random bit-flip
base address to flip value: 0x55555575b188 
address max offset: 8
Memory content after  bitflip:0x230x620x3c0x6e0x5e0x0d0x160x17
frame name: adjust
symbol name: T1
symbol filename: lreg.cpp
symbol line: 36
value: std::vector of length 207929748324132820, capacity 4 = {0.26328326340116115, -0.36018384542045784, 1.9896934246017315, -1.9826796690048623, 0, 4.001931731314097e-322, 0, 1.5810100666919889e-322, 2.1219957904712067e-314, 1.8518277038690557e-317, 0, 0, 0, 0, 0, 7.1639518646980749e-322, 0, -7, 18, 16, -3, 10, -14, 3, -11, 18, -3, -22, -15, -27, -13, -29, 0, 7.1639518646980749e-322, 4.6355706480215905e-310, 792, -11033, -7695, 76, -1809, 5895, -38, 2916, -11033, 76, 22287, 7216, 40852, 4746, 50490, 0, 1.6304166312761136e-322, 4.6355706480136855e-310, -2.9532267296055101, 2.9922328459741543, 1.6304166312761136e-322, 4.6355706480389816e-310, -2.9532267296055101, 2.9922328459741543, 1.6304166312761136e-322, 4.6355706480405627e-310, -2.9532423881951768, 2.9921428710875082, 1.6304166312761136e-322, 0, -2.9532267296055101, 2.9922328459741543, 5.5829417980060859e-322, 0, 164, 326, 86, 1652, 122, 86, 2, 464, 164, 86, 392, 4086, 1.3487992131466031e-321, 12, -7, 18, 16, -3, 10, -14, 3, -11, 18, -3, -22, -15, -27, -13, -29, -67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.3487992131466031e-321, -3179, 792, -11033, -7695, 76, -1809, 5895, -38, 2916, -11033, 76, 22287, 7216, 40852, 4746, 50490, 100559, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.4209216646221081e-322, 0.26328326340116115, -0.36018384542045784, 1.9896934246017315, -1.9826796690048623, 0, 2.4209216646221081e-322, 0.26304797817387188, -0.36018384542045784, 1.9896934246017315, -1.9826796690048623, 0, 2.4209216646221081e-322, 0.2632766677945802, -0.36165742661335148, 1.9962078793790479, -2.0198258959073061, 0, 2.4209216646221081e-322, 4.6355706480840404e-310, -0.36165742661335148, 1.9962078793790479, -2.0198258959073061, 0, 2.4209216646221081e-322, 0, -0.36018384542045784, 1.9896934246017315, -1.9826796690048623, 0, 2.1114883506317354e-319, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0...}
value address: 0x55555575b180 <T1>
Type: The type is a structure.
Type sizeof: 24
Field name: std::_Vector_base<double, std::allocator<double> >
Field Type: The type is a structure.
Field Type sizeof: 24

[INFO -- 2018-11-15 20:37:00]
Fault Injection Successful after 3.4107863903045654s
[INFO -- 2018-11-15 20:37:00]
event type: exit
[EXCEPTION -- 2018-11-15 20:37:00]
exit code: no exit code available
