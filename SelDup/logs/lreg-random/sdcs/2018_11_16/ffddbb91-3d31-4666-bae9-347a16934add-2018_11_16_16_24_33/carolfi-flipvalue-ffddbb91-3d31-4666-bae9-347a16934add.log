[INFO -- 2018-11-16 16:24:29]
Starting flip_value script
version: 1.1
[INFO -- 2018-11-16 16:24:29]
Initialization strings:
[INFO -- 2018-11-16 16:24:29]
(1) file /tmp/lreg/lreg
[INFO -- 2018-11-16 16:24:29]
(2) set args /tmp/lreg/randInput /tmp/lreg/output
[INFO -- 2018-11-16 16:24:29]
initSignal:0
[INFO -- 2018-11-16 16:24:29]
endSignal:5
[INFO -- 2018-11-16 16:24:29]
faultModel:2
[INFO -- 2018-11-16 16:24:32]
Backtrace BEGIN:
#0  0x000055555555521d in verifyDoubleDup (a=2.121995791459338e-314, b=0.95990574493656244) at lreg.cpp:70
#1  0x00005555555557ea in predict (v=-8) at lreg.cpp:116
#2  0x0000555555555a53 in partialDerivate (pos1=2, pos2=2) at lreg.cpp:142
#3  0x0000555555555bbe in adjust (alpha1=2.2222199999999999e-05, alpha2=2.2222199999999999e-05) at lreg.cpp:156
#4  0x0000555555555ee0 in train (iter1=45000, iter2=45000, N=4, alpha1=2.2222199999999999e-05, alpha2=2.2222199999999999e-05, stopsWhenStable=true) at lreg.cpp:193
#5  0x0000555555556467 in main (argc=3, argv=0x7fffffffde58) at lreg.cpp:253

65			fp << "verifyUint: a = "<<a<<"; b = "<<b<<endl;
66	        detected = 1;	
67		}
68		return a;
69	}
70	double verifyDoubleDup(double a, double b){
71		if (a != b && detected != 1){
72			//gerar entrada no log
73			ofstream fp ("/tmp/lreg/detected.log", std::ofstream::app);
74			fp << "verifyDouble: a = "<<a<<"; b = "<<b<<endl;

Backtrace END
Memory content before bitflip:0x7a0xd70xb70x400x8c0xb70xee0x3f
Fault Model: Random bit-flip
base address to flip value: 0x7fffffffd6d8
address max offset: 8
Memory content after  bitflip:0x9f0xe60x0c0x920xba0xce0x7b0x47
frame name: predict
symbol name: val
symbol filename: lreg.cpp
symbol line: 113
value: 2.3101595711588458e+36
value address: 0x7fffffffd6d8
Type: A floating point type.
Type sizeof: 8

[INFO -- 2018-11-16 16:24:32]
Fault Injection Successful after 3.405162811279297s
[INFO -- 2018-11-16 16:24:32]
event type: exit
[INFO -- 2018-11-16 16:24:32]
exit code: 0
