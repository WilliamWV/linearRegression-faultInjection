[INFO -- 2018-11-15 14:03:00]
Starting flip_value script
version: 1.1
[INFO -- 2018-11-15 14:03:00]
Initialization strings:
[INFO -- 2018-11-15 14:03:00]
(1) file /tmp/lreg/lreg
[INFO -- 2018-11-15 14:03:00]
(2) set args /tmp/lreg/randInput /tmp/lreg/output
[INFO -- 2018-11-15 14:03:00]
initSignal:0
[INFO -- 2018-11-15 14:03:00]
endSignal:5
[INFO -- 2018-11-15 14:03:00]
faultModel:2
[INFO -- 2018-11-15 14:03:02]
Backtrace BEGIN:
#0  0x00005555555559d6 in partialDerivate (pos1=2, pos2=2) at lreg.cpp:138
#1  0x0000555555555bbe in adjust (alpha1=2.2222199999999999e-05, alpha2=2.2222199999999999e-05) at lreg.cpp:156
#2  0x0000555555555ee0 in train (iter1=45000, iter2=45000, N=4, alpha1=2.2222199999999999e-05, alpha2=2.2222199999999999e-05, stopsWhenStable=true) at lreg.cpp:193
#3  0x0000555555556467 in main (argc=3, argv=0x7fffffffde58) at lreg.cpp:253

133	}
134	/**
135		Calculates the partial derivate of the meanSquaredError function 
136		to the adjustment variable whose position in T is passed in pos
137	*/
138	double partialDerivate(UINT pos1, UINT pos2){
139		double pD = 0;
140		
141		for(UINT i1 = 0, i2 = 0; verifyUintDup(i1, i2)<(x.size() - 1); i1++, i2++){
142			pD += ((predict(x[verifyUintDup(i1, i2)]) - y[verifyUintDup(i1, i2)])*pow(x[verifyUintDup(i1, i2)], verifyUintDup(pos1, pos2)));	

Backtrace END
Memory content before bitflip:0x000x000x000x000x400xa70xe20xc0
Fault Model: Random bit-flip
base address to flip value: 0x7fffffffd928
address max offset: 8
Memory content after  bitflip:0x710x370xea0xbe0x300x8c0x7e0x45
frame name: main
symbol name: yChecksum
symbol filename: lreg.cpp
symbol line: 233
value: 5.9087688154600214e+26
value address: 0x7fffffffd928
Type: A floating point type.
Type sizeof: 8

[INFO -- 2018-11-15 14:03:02]
Fault Injection Successful after 2.02351450920105s
[INFO -- 2018-11-15 14:03:03]
event type: exit
[INFO -- 2018-11-15 14:03:03]
exit code: 0
