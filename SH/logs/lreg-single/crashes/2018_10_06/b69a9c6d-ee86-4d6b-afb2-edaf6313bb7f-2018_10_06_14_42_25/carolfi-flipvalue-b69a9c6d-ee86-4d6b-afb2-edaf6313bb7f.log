[INFO -- 2018-10-06 14:42:22]
Starting flip_value script
version: 1.1
[INFO -- 2018-10-06 14:42:22]
Initialization strings:
[INFO -- 2018-10-06 14:42:22]
(1) file /tmp/lreg/lreg
[INFO -- 2018-10-06 14:42:22]
(2) set args /tmp/lreg/randInput /tmp/lreg/output
[INFO -- 2018-10-06 14:42:22]
initSignal:0
[INFO -- 2018-10-06 14:42:22]
endSignal:10
[INFO -- 2018-10-06 14:42:22]
faultModel:0
[EXCEPTION -- 2018-10-06 14:42:24]
gdbException: Cannot access memory at address 0x555155771650
[INFO -- 2018-10-06 14:42:24]
Backtrace BEGIN:
#0  0x0000555555557b7e in std::__copy_move<false, true, std::random_access_iterator_tag>::__copy_m<double> (__first=0x555555771360, __last=0x555555771378, __result=0x555555771340) at /usr/include/c++/7/bits/stl_algobase.h:366
#1  0x0000555555557940 in std::__copy_move_a<false, double const*, double*> (__first=0x555555771360, __last=0x555555771378, __result=0x555555771340) at /usr/include/c++/7/bits/stl_algobase.h:386
#2  0x000055555555743f in std::__copy_move_a2<false, __gnu_cxx::__normal_iterator<double const*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > > (__first=0.34295427238549347, __last=2.4209216646221081e-322, __result=0.34293767372855233) at /usr/include/c++/7/bits/stl_algobase.h:422
#3  0x0000555555556c65 in std::copy<__gnu_cxx::__normal_iterator<double const*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > > (__first=0.34295427238549347, __last=2.4209216646221081e-322, __result=0.34293767372855233) at /usr/include/c++/7/bits/stl_algobase.h:456
#4  0x00005555555565a7 in std::vector<double, std::allocator<double> >::operator= (this=0x7fffffffd830, __x=std::vector of length 3, capacity 3 = {...}) at /usr/include/c++/7/bits/vector.tcc:218
#5  0x000055555555587c in train (iterations=60000, N=3, stopsWhenStable=true) at lreg.cpp:158
#6  0x0000555555555dba in main (argc=3, argv=0x7fffffffde68) at lreg.cpp:225

361						   is_move_assignable<_Tp>,
362						   is_copy_assignable<_Tp>>;
363		  // trivial types can have deleted assignment
364		  static_assert( __assignable::type::value, "type is not assignable" );
365	#endif
366		  const ptrdiff_t _Num = __last - __first;
367		  if (_Num)
368		    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
369		  return __result + _Num;
370		}

Backtrace END
Memory content before bitflip:0x2d0x430x1c0xeb0xe20x360x0a0x3f
Fault Model: Single bit-flip
base address to flip value: 0x55555575a1a8 
address max offset: 8
Memory content after  bitflip:0x2d0x430x5c0xeb0xe20x360x0a0x3f
frame name: std::__copy_move_a<false, double const*, double*>
symbol name: a3
symbol filename: lreg.cpp
symbol line: 45
value: 5.0000000028421712e-05
value address: 0x55555575a1a8 <a3>
Type: A floating point type.
Type sizeof: 8

[INFO -- 2018-10-06 14:42:24]
Fault Injection Successful after 2.2956371307373047s
[INFO -- 2018-10-06 14:42:24]
event type: exit
[EXCEPTION -- 2018-10-06 14:42:24]
exit code: no exit code available
