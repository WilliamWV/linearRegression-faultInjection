[INFO -- 2018-09-30 17:43:35]
Starting flip_value script
version: 1.1
[INFO -- 2018-09-30 17:43:35]
Initialization strings:
[INFO -- 2018-09-30 17:43:35]
(1) file /tmp/lreg/lreg
[INFO -- 2018-09-30 17:43:35]
(2) set args /tmp/lreg/randInput /tmp/lreg/output
[INFO -- 2018-09-30 17:43:35]
initSignal:0
[INFO -- 2018-09-30 17:43:35]
endSignal:30
[INFO -- 2018-09-30 17:43:35]
faultModel:1
[EXCEPTION -- 2018-09-30 17:43:38]
pythonException: Unable to exit loop in struct fields; Exiting wihtout making a bit flip
[INFO -- 2018-09-30 17:43:38]
Backtrace BEGIN:
#0  0x0000555555556645 in std::vector<double, std::allocator<double> >::operator[] (this=0x55555575b180 <T>, __n=0) at /usr/include/c++/7/bits/stl_vector.h:798
#1  0x000055555555533a in predict (v=18) at lreg.cpp:73
#2  0x0000555555555446 in meanSquaredError () at lreg.cpp:93
#3  0x0000555555555827 in train (iterations=60000, alpha=5.0000000000000002e-05, N=3, stopsWhenStable=true) at lreg.cpp:153
#4  0x0000555555555dc9 in lreg (input=0x7fffffffe210 "/tmp/lreg/randInput", output=0x7fffffffe224 "/tmp/lreg/output") at lreg.cpp:213
#5  0x00005555555564e2 in main (argc=3, argv=0x7fffffffde68) at lreg.cpp:276

793	       */
794	      reference
795	      operator[](size_type __n) _GLIBCXX_NOEXCEPT
796	      {
797		__glibcxx_requires_subscript(__n);
798		return *(this->_M_impl._M_start + __n);
799	      }
800	
801	      /**
802	       *  @brief  Subscript access to the data contained in the %vector.

Backtrace END
Memory content before bitflip:0x5d0x570xb10xb00x400xd00x8d0xc0
Fault Model: Double bit-flip
base address to flip value: 0x7fffffffd608
address max offset: 8
Memory content after  bitflip:0x5d0x570xb10xb00xc80xd00x8d0xc0
frame name: predict
symbol name: val1
symbol filename: lreg.cpp
symbol line: 53
value: -954.09799326465475
value address: 0x7fffffffd608
Type: A floating point type.
Type sizeof: 8

[INFO -- 2018-09-30 17:43:38]
Fault Injection Successful after 3.9509694576263428s
[INFO -- 2018-09-30 17:44:01]
event type: exit
[INFO -- 2018-09-30 17:44:01]
exit code: 0
