[INFO -- 2018-11-01 23:58:15]
Starting flip_value script
version: 1.1
[INFO -- 2018-11-01 23:58:15]
Initialization strings:
[INFO -- 2018-11-01 23:58:15]
(1) file /tmp/lreg/lreg
[INFO -- 2018-11-01 23:58:15]
(2) set args /tmp/lreg/randInput /tmp/lreg/output /tmp/lreg/detected.log
[INFO -- 2018-11-01 23:58:15]
initSignal:0
[INFO -- 2018-11-01 23:58:15]
endSignal:10
[INFO -- 2018-11-01 23:58:15]
faultModel:2
[INFO -- 2018-11-01 23:58:21]
Backtrace BEGIN:
#0  0x0000555555556105 in std::vector<double, std::allocator<double> >::operator[] (this=0x55555575b180 <T>, __n=1) at /usr/include/c++/7/bits/stl_vector.h:799
#1  0x0000555555555217 in predict (v=20) at lreg.cpp:50
#2  0x000055555555530a in meanSquaredError () at lreg.cpp:61
#3  0x00005555555556b1 in train (iterations=45000, alpha=2.2222199999999999e-05, N=4, stopsWhenStable=true) at lreg.cpp:121
#4  0x0000555555555a1c in execute (input=0x7fffffffe1f3 "/tmp/lreg/randInput") at lreg.cpp:157
#5  0x0000555555555c98 in main (argc=4, argv=0x7fffffffde48) at lreg.cpp:194

794	      reference
795	      operator[](size_type __n) _GLIBCXX_NOEXCEPT
796	      {
797		__glibcxx_requires_subscript(__n);
798		return *(this->_M_impl._M_start + __n);
799	      }
800	
801	      /**
802	       *  @brief  Subscript access to the data contained in the %vector.
803	       *  @param __n The index of the element for which data should be

Backtrace END
Fliping value of field: std::_Vector_base<double, std::allocator<double> >
Fliping value of field: _M_impl
Fliping value of field: _M_finish
Fliping a bit of the pointer
Memory content before bitflip:0x000x250x770x550x550x550x000x00
Fault Model: Random bit-flip
base address to flip value: 0x7fffffffd928
address max offset: 8
Memory content after  bitflip:0xad0x3f0xf30xc30xbc0x9b0xb10x43
frame name: execute
symbol name: ans
symbol filename: lreg.cpp
symbol line: 135
value: std::vector of length 609719660183520095, capacity 16 = {-1.9999814186852736, -2.0000278557317634, -1.9999999935038695, -1.9999832761671332, 567.43647639678943, 1224.8400219367477, 791.88551713933623, 33.849385390373683, -13.685740541912041, 178.02822095008523, 367.40521311549475, 481.49289253861201, 8556.8289074086897, 708.41836001519573, -7822.3187067397175, 9969.9392005007012, 0, 1.3487992131466031e-321, 0, 8, -11, -3, -16, -7, -12, 6, 1, -23, -1, 7, -22, -13, -22, 21, 24, 22, -19, 13, 10, -10, 31, -24, 8, -28, 6, 20, 18, -20, 22, 0, 0, 1.3487992131466031e-321, -1.9999814186852736, -2.0000278557317634, -1.9999999935038695, -1.9999832761671332, 567.43647639678943, 1224.8400219367477, 791.88551713933623, 33.849385390373683, -13.685740541912041, 178.02822095008523, 367.40521311549475, 481.49289253861201, 8556.8289074086897, 708.41836001519573, -7822.3187067397175, 9969.9392005007012, -404.46032568370185, -7822.3187067397175, 1083, 507, -534, 1546, -25104, 16806, -218, 25990, -54, -6074, -4278, 10086, -8310, 6, 0, 2.6136072665001942e-321, -8, 8, -11, -3, -16, -7, -12, 6, 1, -23, -1, 7, -22, -13, -22, 21, 24, 22, -19, 13, 10, -10, 31, -24, 8, -28, 6, 20, 18, -20, 22, 0, -19, 17, 28, -21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.6136072665001942e-321, -2, -2, -2, -2, -2, -2, -2, -2, 3, 1587, 3, 147, 1452, 507, 1452, 1323, 1728, 1452, 1083, 507, -534, 1546, -25104, 16806, -218, 25990, -54, -6074, -4278, 10086, -8310, 6, 8746, -3530, -18138, 11556, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0...}
value address: 0x7fffffffd920
Type: The type is a structure.
Type sizeof: 24
Field name: std::_Vector_base<double, std::allocator<double> >
Field Type: The type is a structure.
Field Type sizeof: 24

[INFO -- 2018-11-01 23:58:21]
Fault Injection Successful after 6.332813739776611s
[INFO -- 2018-11-01 23:58:25]
event type: exit
[EXCEPTION -- 2018-11-01 23:58:25]
exit code: no exit code available
