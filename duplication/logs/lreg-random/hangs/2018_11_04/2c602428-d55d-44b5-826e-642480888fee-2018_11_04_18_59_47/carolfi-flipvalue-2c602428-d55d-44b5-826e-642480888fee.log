[INFO -- 2018-11-04 18:59:23]
Starting flip_value script
version: 1.1
[INFO -- 2018-11-04 18:59:23]
Initialization strings:
[INFO -- 2018-11-04 18:59:23]
(1) file /tmp/lreg/lreg
[INFO -- 2018-11-04 18:59:23]
(2) set args /tmp/lreg/randInput /tmp/lreg/output /tmp/lreg/detected.log
[INFO -- 2018-11-04 18:59:23]
initSignal:0
[INFO -- 2018-11-04 18:59:23]
endSignal:10
[INFO -- 2018-11-04 18:59:23]
faultModel:2
[EXCEPTION -- 2018-11-04 18:59:26]
pythonException: empty range for randrange() (0,0, 0)
[EXCEPTION -- 2018-11-04 18:59:27]
pythonException: Unable to exit loop in struct fields; Exiting wihtout making a bit flip
[INFO -- 2018-11-04 18:59:28]
Backtrace BEGIN:
#0  0x000055555555523c in predict (v=-32) at lreg.cpp:50
#1  0x00005555555553fc in partialDerivate (pos=1) at lreg.cpp:74
#2  0x0000555555555503 in adjust (alpha=2.2222199999999999e-05) at lreg.cpp:87
#3  0x00005555555556ac in train (iterations=45000, alpha=2.2222199999999999e-05, N=4, stopsWhenStable=true) at lreg.cpp:120
#4  0x0000555555555a1c in execute (input=0x7fffffffe1f1 "/tmp/lreg/randInput") at lreg.cpp:157
#5  0x0000555555555c60 in main (argc=4, argv=0x7fffffffde48) at lreg.cpp:191

45		Predicts the value related to v using the Ts variables
46	*/
47	double predict(double v){
48		double val = 0;
49		for(int i = 0; i<T.size(); i++){
50			val+= (T[i] * pow(v, i));
51		}
52		return val;
53		
54	}

Backtrace END
Fliping value of field: std::_Vector_base<double, std::allocator<double> >
Fliping value of field: _M_impl
Fliping value of field: _M_start
Fliping a bit of the value pointed by a pointer
Memory content before bitflip:0x5a0x400x000x000x000x000x000x00
Fault Model: Random bit-flip
base address to flip value: 0x5555557729ee
address max offset: 8
Memory content after  bitflip:0x7a0xba0x0b0x350xa50xc90x9a0xca
frame name: partialDerivate
symbol name: y
symbol filename: lreg.cpp
symbol line: 33
value: std::vector of length 20, capacity 48 = {-2.5056149734040931e+51, 8.1254036115051407e-320, -2.6815615859983231e+154, 8.1510950250888855e-320, -32.000000000116643, -7.013789916903782e-192, -3.206669376026176e-291, 2.4407336970203421e-319, -6.0060134630656366e+256, -8.3711609937345014e+298, 4.5767114682041792e-246, 9.6096215409753282e+257, 2.9103830457052621e-11, -6.3108872418372709e-30, 2.7697848314107769e+275, 7.8968254139982835e-177, -6.3108872418373144e-30, -4.1805445652322591e-199, 5.5090160396468732e-281, -4.383618698032958e-193, 8.1614704036515517e-320, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.5865752221267447e-317, -1.185600477056954e+29, 3.4251252875273661e-90, -5.2606226837571819e-181, 1.0136633071281888e-253, 2.8205713655430924e-319, 1.5865752221267447e-317, -1.7645171812633005e+87, -1.77782282970556e+121, -6.5972127489905011e+134, 3.3876032771281425e-248, 8.0972418696921896e-320, 1.5865752221267447e-317, 1.1945594408446139e+103, 1.0205996917288452e-94, -2.2474014742242034e-185, 5.7661318430525191e-258, 2.8205713655430924e-319, 1.5865752221267447e-317, 0, 3.4251252875025159e-90, -5.2606226837571819e-181, 1.0136633071281888e-253, 2.8205713655430924e-319, 1.3578817365373325e-314, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0...}
value address: 0x55555575b160 <y>
Type: The type is a structure.
Type sizeof: 24
Field name: std::_Vector_base<double, std::allocator<double> >
Field Type: The type is a structure.
Field Type sizeof: 24

[INFO -- 2018-11-04 18:59:28]
Fault Injection Successful after 5.496549129486084s
[INFO -- 2018-11-04 18:59:47]
event type: exit
[EXCEPTION -- 2018-11-04 18:59:47]
exit code: no exit code available
