[INFO -- 2018-11-07 18:23:28]
Starting flip_value script
version: 1.1
[INFO -- 2018-11-07 18:23:28]
Initialization strings:
[INFO -- 2018-11-07 18:23:28]
(1) file /tmp/lreg/lreg
[INFO -- 2018-11-07 18:23:28]
(2) set args /tmp/lreg/randInput /tmp/lreg/output /tmp/lreg/detected.log
[INFO -- 2018-11-07 18:23:28]
initSignal:0
[INFO -- 2018-11-07 18:23:28]
endSignal:10
[INFO -- 2018-11-07 18:23:28]
faultModel:2
[INFO -- 2018-11-07 18:23:35]
Backtrace BEGIN:
#0  std::_Vector_base<double, std::allocator<double> >::_M_get_Tp_allocator (this=0x555555772b80) at /usr/include/c++/7/bits/stl_vector.h:119
#1  0x00005555555562d4 in std::vector<double, std::allocator<double> >::vector (this=0x7fffffffd5d0, __x=std::vector of length 4, capacity 4 = {...}) at /usr/include/c++/7/bits/stl_vector.h:328
#2  0x000055555555572b in train (iterations=45000, alpha=2.2222199999999999e-05, N=4, stopsWhenStable=true) at lreg.cpp:126
#3  0x0000555555555a1c in execute (input=0x7fffffffe1f2 "/tmp/lreg/randInput") at lreg.cpp:157
#4  0x0000555555555c98 in main (argc=4, argv=0x7fffffffde48) at lreg.cpp:194

114	      _Tp_alloc_type&
115	      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
116	      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
117	
118	      const _Tp_alloc_type&
119	      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
120	      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
121	
122	      allocator_type
123	      get_allocator() const _GLIBCXX_NOEXCEPT

Backtrace END
Memory content before bitflip:0x040x000x000x00
Fault Model: Random bit-flip
base address to flip value: 0x7fffffffd8ec
address max offset: 4
Memory content after  bitflip:0x260x9c0xc30xe0
frame name: main
symbol name: argc
symbol filename: lreg.cpp
symbol line: 179
value: -524051418
value address: 0x7fffffffd8ec
Type: The type is an integer type.
Type sizeof: 4

[INFO -- 2018-11-07 18:23:35]
Fault Injection Successful after 7.109344720840454s
[INFO -- 2018-11-07 18:23:37]
event type: exit
[INFO -- 2018-11-07 18:23:37]
exit code: 0
