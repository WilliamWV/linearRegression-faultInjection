[INFO -- 2018-11-01 23:59:16]
Starting flip_value script
version: 1.1
[INFO -- 2018-11-01 23:59:16]
Initialization strings:
[INFO -- 2018-11-01 23:59:16]
(1) file /tmp/lreg/lreg
[INFO -- 2018-11-01 23:59:16]
(2) set args /tmp/lreg/randInput /tmp/lreg/output /tmp/lreg/detected.log
[INFO -- 2018-11-01 23:59:16]
initSignal:0
[INFO -- 2018-11-01 23:59:16]
endSignal:10
[INFO -- 2018-11-01 23:59:16]
faultModel:0
[INFO -- 2018-11-01 23:59:19]
Backtrace BEGIN:
#0  std::vector<double, std::allocator<double> >::size (this=0xc01c000000000000) at /usr/include/c++/7/bits/stl_vector.h:670
#1  0x00005555555551f9 in predict (v=-7) at lreg.cpp:49
#2  0x00005555555553fc in partialDerivate (pos=2) at lreg.cpp:74
#3  0x0000555555555503 in adjust (alpha=2.2222199999999999e-05) at lreg.cpp:87
#4  0x00005555555556ac in train (iterations=45000, alpha=2.2222199999999999e-05, N=4, stopsWhenStable=true) at lreg.cpp:120
#5  0x0000555555555a1c in execute (input=0x7fffffffe1f3 "/tmp/lreg/randInput") at lreg.cpp:157
#6  0x0000555555555c60 in main (argc=4, argv=0x7fffffffde48) at lreg.cpp:191

665	#endif
666	
667	      // [23.2.4.2] capacity
668	      /**  Returns the number of elements in the %vector.  */
669	      size_type
670	      size() const _GLIBCXX_NOEXCEPT
671	      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
672	
673	      /**  Returns the size() of the largest possible %vector.  */
674	      size_type

Backtrace END
Memory content before bitflip:0x900x310x260x250x630x9d0x5e0x40
Fault Model: Single bit-flip
base address to flip value: 0x7fffffffd488
address max offset: 8
Memory content after  bitflip:0xd00x310x260x250x630x9d0x5e0x40
frame name: predict
symbol name: val
symbol filename: lreg.cpp
symbol line: 48
value: 122.45917633752765
value address: 0x7fffffffd488
Type: A floating point type.
Type sizeof: 8

[INFO -- 2018-11-01 23:59:19]
Fault Injection Successful after 3.7660253047943115s
[INFO -- 2018-11-01 23:59:28]
event type: exit
[INFO -- 2018-11-01 23:59:28]
exit code: 0
