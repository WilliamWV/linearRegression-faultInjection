[INFO -- 2018-11-09 11:45:24]
Starting flip_value script
version: 1.1
[INFO -- 2018-11-09 11:45:24]
Initialization strings:
[INFO -- 2018-11-09 11:45:24]
(1) file /tmp/lreg/lreg
[INFO -- 2018-11-09 11:45:24]
(2) set args /tmp/lreg/randInput /tmp/lreg/output /tmp/lreg/detected.log
[INFO -- 2018-11-09 11:45:24]
initSignal:0
[INFO -- 2018-11-09 11:45:24]
endSignal:10
[INFO -- 2018-11-09 11:45:24]
faultModel:0
[EXCEPTION -- 2018-11-09 11:45:25]
gdbException: Cannot access memory at address 0x20555555772650
[INFO -- 2018-11-09 11:45:25]
Backtrace BEGIN:
#0  0x00005555555562a4 in std::vector<double, std::allocator<double> >::vector (this=0x7fffffffd5b0, __x=std::vector of length 3, capacity 3 = {...}) at /usr/include/c++/7/bits/stl_vector.h:326
#1  0x0000555555555713 in train (iterations=30000, alpha=5.0000000000000002e-05, N=3, stopsWhenStable=true) at lreg.cpp:126
#2  0x0000555555555a1c in execute (input=0x7fffffffe1f3 "/tmp/lreg/randInput") at lreg.cpp:157
#3  0x0000555555555c60 in main (argc=4, argv=0x7fffffffde48) at lreg.cpp:191

321	       *  (i.e. capacity() == size() in the new %vector).
322	       *
323	       *  The newly-created %vector uses a copy of the allocator object used
324	       *  by @a __x (unless the allocator traits dictate a different object).
325	       */
326	      vector(const vector& __x)
327	      : _Base(__x.size(),
328		_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
329	      {
330		this->_M_impl._M_finish =

Backtrace END
Memory content before bitflip:0x030x000x000x00
Fault Model: Single bit-flip
base address to flip value: 0x7fffffffd66c
address max offset: 4
Memory content after  bitflip:0x030x000x000x02
frame name: execute
symbol name: N
symbol filename: lreg.cpp
symbol line: 144
value: 33554435
value address: 0x7fffffffd66c
Type: The type is an integer type.
Type sizeof: 4

[INFO -- 2018-11-09 11:45:25]
Fault Injection Successful after 1.8609111309051514s
[INFO -- 2018-11-09 11:45:26]
event type: exit
[EXCEPTION -- 2018-11-09 11:45:26]
exit code: no exit code available
