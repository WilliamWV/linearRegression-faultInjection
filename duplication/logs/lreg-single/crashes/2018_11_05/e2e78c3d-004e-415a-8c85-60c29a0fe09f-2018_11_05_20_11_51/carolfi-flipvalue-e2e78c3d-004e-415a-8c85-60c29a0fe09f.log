[INFO -- 2018-11-05 20:11:43]
Starting flip_value script
version: 1.1
[INFO -- 2018-11-05 20:11:43]
Initialization strings:
[INFO -- 2018-11-05 20:11:43]
(1) file /tmp/lreg/lreg
[INFO -- 2018-11-05 20:11:43]
(2) set args /tmp/lreg/randInput /tmp/lreg/output /tmp/lreg/detected.log
[INFO -- 2018-11-05 20:11:43]
initSignal:0
[INFO -- 2018-11-05 20:11:43]
endSignal:10
[INFO -- 2018-11-05 20:11:43]
faultModel:0
[INFO -- 2018-11-05 20:11:50]
Backtrace BEGIN:
#0  0x0000555555555241 in predict (v=12) at lreg.cpp:50
#1  0x00005555555553fc in partialDerivate (pos=2) at lreg.cpp:74
#2  0x0000555555555503 in adjust (alpha=5.0000000000000002e-05) at lreg.cpp:87
#3  0x00005555555556ac in train (iterations=30000, alpha=5.0000000000000002e-05, N=3, stopsWhenStable=true) at lreg.cpp:120
#4  0x0000555555555a1c in execute (input=0x7fffffffe1f3 "/tmp/lreg/randInput") at lreg.cpp:157
#5  0x0000555555555c98 in main (argc=4, argv=0x7fffffffde48) at lreg.cpp:194

45		Predicts the value related to v using the Ts variables
46	*/
47	double predict(double v){
48		double val = 0;
49		for(int i = 0; i<T.size(); i++){
50			val+= (T[i] * pow(v, i));
51		}
52		return val;
53		
54	}

Backtrace END
Fliping value of field: std::_Vector_base<double, std::allocator<double> >
Fliping value of field: _M_impl
Fliping value of field: _M_finish
Fliping a bit of the pointer
Memory content before bitflip:0xa00x230x770x550x550x550x000x00
Fault Model: Single bit-flip
base address to flip value: 0x7fffffffd928
address max offset: 8
Memory content after  bitflip:0xa00x230x770x550x550x550x000x02
frame name: main
symbol name: e2
symbol filename: lreg.cpp
symbol line: 194
value: std::vector of length 18014398509481988, capacity 4 = {-5.0000033305532607, 11.00000998944674, -27.000021645553261, 17.000014984446739, 0, 4.001931731314097e-322, 4.635570648008152e-310, 1.5810100666919889e-322, -27.000030517578121, 1.7545659408287479e-317, 1492.7148445425657, 638.52580748693765, 931.50959991369723, 931.50959991369723, 0, 4.001931731314097e-322, 0, 1.5810100666919889e-322, 2.1219957904712067e-314, 1.1246733746356861e-312, 0, 0, 0, 0, 0, 1.6304166312761136e-322, -14.850381134406705, -2.3732029133398989, 2.7463251578998631, 1.6304166312761136e-322, 4.6355706480287051e-310, -2.3731949859622024, 2.7461899055933308, 1.6304166312761136e-322, 0, -2.3732029133398989, 2.7463251578998631, 7.1639518646980749e-322, 0, 11.00000998944674, -27.000021645553261, 17.000014984446739, 1492.7151234502321, 638.52580748693765, 931.50959991369723, 931.50959991369723, -10.106039802193044, 1131.1831175136736, 3135.8662151188573, -868.51142927934541, -24.365741976940519, 644.10796152731575, -64086.796655368453, -1321.5788549032513, 0, 1.3487992131466031e-321, 0, 2, -9, 15, -9, -12, 11, -1, -20, -12, -14, 6, 24, 12, -2, 16, 4, -24, -3, 6, 21, 14, -30, 3, 26, -4, -4, 29, -1, 28, -19, 32, 0, 1.3487992131466031e-321, -5.0000033305532607, 11.00000998944674, -27.000021645553261, 17.000014984446739, 1492.7151234502321, 638.52580748693765, 931.50959991369723, 931.50959991369723, -10.106039802193044, 1131.1831175136736, 3135.8662151188573, -868.51142927934541, -24.365741976940519, 644.10796152731575, -64086.796655368453, -1321.5788549032513, 1197.583614833791, 96070.027564944699, 25, 106, 54689, 16077, -163795, 149, 104109, -411, -411, 144657, -3, 130149, -41871, 194565, 0, 2.6136072665001942e-321, 3, 2, -9, 15, -9, -12, 11, -1, -20, -12, -14, 6, 24, 12, -2, 16, 4, -24, -3, 6, 21, 14, -30, 3, 26, -4, -4, 29, -1, 28, -19, 32, 29, -5, 9, -25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.6136072665001942e-321, -7, -5, 17, -31, 17, 23, -23, 1, 1198, 430...}
value address: 0x7fffffffd920
Type: The type is a structure.
Type sizeof: 24
Field name: std::_Vector_base<double, std::allocator<double> >
Field Type: The type is a structure.
Field Type sizeof: 24

[INFO -- 2018-11-05 20:11:50]
Fault Injection Successful after 7.098520755767822s
[INFO -- 2018-11-05 20:11:50]
event type: exit
[EXCEPTION -- 2018-11-05 20:11:50]
exit code: no exit code available
