[INFO -- 2018-11-25 19:19:06]
Starting flip_value script
version: 1.1
[INFO -- 2018-11-25 19:19:06]
Initialization strings:
[INFO -- 2018-11-25 19:19:06]
(1) file /tmp/lreg/lreg
[INFO -- 2018-11-25 19:19:06]
(2) set args /tmp/lreg/randInput /tmp/lreg/output /tmp/lreg/detected.log
[INFO -- 2018-11-25 19:19:06]
initSignal:0
[INFO -- 2018-11-25 19:19:06]
endSignal:6
[INFO -- 2018-11-25 19:19:06]
faultModel:1
[INFO -- 2018-11-25 19:19:08]
Backtrace BEGIN:
#0  0x00005555555561d4 in std::vector<double, std::allocator<double> >::operator[] (this=0x55555575b140 <x>, __n=7) at /usr/include/c++/7/bits/stl_vector.h:795
#1  0x00005555555553eb in partialDerivate (pos=0) at lreg.cpp:74
#2  0x0000555555555503 in adjust (alpha=2.2222199999999999e-05) at lreg.cpp:87
#3  0x00005555555556ac in train (iterations=30000, alpha=2.2222199999999999e-05, N=4, stopsWhenStable=true) at lreg.cpp:120
#4  0x0000555555555a1c in execute (input=0x7fffffffe1f1 "/tmp/lreg/randInput") at lreg.cpp:157
#5  0x0000555555555cb0 in main (argc=4, argv=0x7fffffffde48) at lreg.cpp:196

790	       *  Note that data access with this operator is unchecked and
791	       *  out_of_range lookups are not defined. (For checked lookups
792	       *  see at().)
793	       */
794	      reference
795	      operator[](size_type __n) _GLIBCXX_NOEXCEPT
796	      {
797		__glibcxx_requires_subscript(__n);
798		return *(this->_M_impl._M_start + __n);
799	      }

Backtrace END
Fliping value of field: std::_Vector_base<double, std::allocator<double> >
Fliping value of field: _M_impl
Fliping value of field: _M_finish
Fliping a bit of the pointer
Memory content before bitflip:0xc00x250x770x550x550x550x000x00
Fault Model: Double bit-flip
base address to flip value: 0x55555575b168 
address max offset: 8
Memory content after  bitflip:0xc00x250x770xd70x550x550x000x00
frame name: partialDerivate
symbol name: y
symbol filename: lreg.cpp
symbol line: 33
value: std::vector of length 272629776, capacity 16 = {13145, 2813, 13, -99407, -575, 22793, -121267, 15973, 22793, 86413, -63895, 10673, -1507, 41, 19181, -38047, 0, 7.1639518646980749e-322, 9.9997448205173409, 10.999751207252501, 12.999763980722822, -7.0003637539803849, -1078.8160145721722, -1078.8160145721722, -1722.5303976432911, -1319.1177772194476, -1582.6669839552355, -584.82432114594803, 97026.528835098041, -561.68664594912298, -9235.2779191372501, 69793.215647290359, -295.84796972341951, 42146.236069249338, 0, 2.4209216646221081e-322, 0.3349991401664581, -1.3786021033276701, -1.9585698531209164, -4.0442541830148917, 0, 2.4209216646221081e-322, 0.3349991401664581, -1.3786021033276701, -1.9585698531209164, -4.0442541830148917, 0, 2.4209216646221081e-322, 4.6355706480587443e-310, -1.3758070203868509, -1.9491396090042861, -3.969634026212256, 0, 2.4209216646221081e-322, 0, -1.3786021033276701, -1.9585698531209164, -4.0442541830148917, 0, 1.3487992131466031e-321, 9.9997448205173409, 10.999751207252501, 12.999763980722822, -7.0003637539803849, -1078.8160145721722, -1078.8160145721722, -1722.5303976432911, -1319.1177772194476, -1582.6669839552355, -584.82432114594803, 97026.528835098041, -561.68664594912298, -9235.2779191372501, 69793.215647290359, -295.84796972341951, 42146.236069249338, 19328.177037179787, -20460.150394813842, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.1233459261319253e-319, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0...}
value address: 0x55555575b160 <y>
Type: The type is a structure.
Type sizeof: 24
Field name: std::_Vector_base<double, std::allocator<double> >
Field Type: The type is a structure.
Field Type sizeof: 24

[INFO -- 2018-11-25 19:19:08]
Fault Injection Successful after 2.979139566421509s
[INFO -- 2018-11-25 19:19:09]
event type: exit
[INFO -- 2018-11-25 19:19:09]
exit code: 0
