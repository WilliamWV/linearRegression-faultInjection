[INFO -- 2018-11-07 18:31:15]
Starting flip_value script
version: 1.1
[INFO -- 2018-11-07 18:31:15]
Initialization strings:
[INFO -- 2018-11-07 18:31:15]
(1) file /tmp/lreg/lreg
[INFO -- 2018-11-07 18:31:15]
(2) set args /tmp/lreg/randInput /tmp/lreg/output /tmp/lreg/detected.log
[INFO -- 2018-11-07 18:31:15]
initSignal:0
[INFO -- 2018-11-07 18:31:15]
endSignal:10
[INFO -- 2018-11-07 18:31:15]
faultModel:1
[INFO -- 2018-11-07 18:31:20]
Backtrace BEGIN:
#0  0x00005555555560e0 in std::vector<double, std::allocator<double> >::size (this=0x55555575b180 <T>) at /usr/include/c++/7/bits/stl_vector.h:671
#1  0x00005555555551f9 in predict (v=-8) at lreg.cpp:49
#2  0x00005555555553fc in partialDerivate (pos=2) at lreg.cpp:74
#3  0x0000555555555503 in adjust (alpha=2.2222199999999999e-05) at lreg.cpp:87
#4  0x00005555555556ac in train (iterations=45000, alpha=2.2222199999999999e-05, N=4, stopsWhenStable=true) at lreg.cpp:120
#5  0x0000555555555a1c in execute (input=0x7fffffffe1f2 "/tmp/lreg/randInput") at lreg.cpp:157
#6  0x0000555555555c60 in main (argc=4, argv=0x7fffffffde48) at lreg.cpp:191

666	
667	      // [23.2.4.2] capacity
668	      /**  Returns the number of elements in the %vector.  */
669	      size_type
670	      size() const _GLIBCXX_NOEXCEPT
671	      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
672	
673	      /**  Returns the size() of the largest possible %vector.  */
674	      size_type
675	      max_size() const _GLIBCXX_NOEXCEPT

Backtrace END
Fliping value of field: std::_Vector_base<double, std::allocator<double> >
Fliping value of field: _M_impl
Fliping value of field: _M_finish
Fliping a bit of the pointer
Memory content before bitflip:0xa00x230x770x550x550x550x000x00
Fault Model: Double bit-flip
base address to flip value: 0x55555575b188 
address max offset: 8
Memory content after  bitflip:0xa00x230x770x550x550x550x000xa0
frame name: main
symbol name: T
symbol filename: lreg.cpp
symbol line: 34
value: std::vector of length -864691128455135228, capacity 4 = {-0.6454228571542443, 23.507467112526353, -7.0005747500180311, -5.3246946456955326, 0, 4.001931731314097e-322, 4.635570648008152e-310, 1.5810100666919889e-322, 16.000015258789059, 9.5743194857634631e-308, 30.939620984063527, 566.73405561944662, 566.73405561944662, 843.65751724919232, 0, 4.001931731314097e-322, 0, 1.5810100666919889e-322, 2.1219957904712067e-314, 1.1286365785768106e-312, 0, 0, 0, 0, 0, 1.6304166312761136e-322, 4.6355706480121045e-310, 5.9137470167030308, 2.9791059836739842, 1.6304166312761136e-322, 4.6355706480287051e-310, 5.9137660916173393, 2.9789359934628026, 1.6304166312761136e-322, 0, 5.9137470167030308, 2.9791059836739842, 7.1639518646980749e-322, 12.000005911556119, 6.0000023658564263, 16.000008275355917, 18.000009457255814, 30.93962806457882, 566.73405561944662, 566.73405561944662, 843.65751724919232, 654.41761271469534, 344.41273061002124, 1494, 1539, 174, 223, 934, 558, 0, 1.3487992131466031e-321, 0, -1, -10, -4, -11, -7, 4, -11, -5, -19, -23, 22, 7, 8, 17, 13, -18, -24, 18, -7, -21, 27, -20, -11, 26, -14, 32, -32, -8, -22, 13, 13, 0, 1.3487992131466031e-321, 4.6355706480374006e-310, 4, 22, 10, 24, 16, -6, 24, 54, 1006, 1494, 1539, 174, 223, 934, 558, 899, 1631, 1043, 118, 55143, -118857, 47617, 7873, -106161, 16279, -197667, 195613, 3013, 63423, -13367, -13367, 0, 2.6136072665001942e-321, 7, -1, -10, -4, -11, -7, 4, -11, -5, -19, -23, 22, 7, 8, 17, 13, -18, -24, 18, -7, -21, 27, -20, -11, 26, -14, 32, -32, -8, -22, 13, 13, -28, -29, 3, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.6136072665001942e-321, -12, 4, 22, 10, 24, 16, -6, 24, 54, 1006...}
value address: 0x55555575b180 <T>
Type: The type is a structure.
Type sizeof: 24
Field name: std::_Vector_base<double, std::allocator<double> >
Field Type: The type is a structure.
Field Type sizeof: 24

[INFO -- 2018-11-07 18:31:20]
Fault Injection Successful after 5.045279264450073s
[INFO -- 2018-11-07 18:31:20]
event type: exit
[EXCEPTION -- 2018-11-07 18:31:20]
exit code: no exit code available
