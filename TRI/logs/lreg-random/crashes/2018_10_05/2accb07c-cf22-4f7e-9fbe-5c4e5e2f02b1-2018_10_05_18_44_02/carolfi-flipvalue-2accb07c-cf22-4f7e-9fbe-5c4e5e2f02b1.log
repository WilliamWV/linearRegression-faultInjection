[INFO -- 2018-10-05 18:43:53]
Starting flip_value script
version: 1.1
[INFO -- 2018-10-05 18:43:53]
Initialization strings:
[INFO -- 2018-10-05 18:43:53]
(1) file /tmp/lreg/lreg
[INFO -- 2018-10-05 18:43:53]
(2) set args /tmp/lreg/randInput /tmp/lreg/output
[INFO -- 2018-10-05 18:43:53]
initSignal:0
[INFO -- 2018-10-05 18:43:53]
endSignal:30
[INFO -- 2018-10-05 18:43:53]
faultModel:2
[INFO -- 2018-10-05 18:44:01]
Backtrace BEGIN:
#0  0x00005555555554bb in partialDerivate (pos=0) at lreg.cpp:92
#1  0x00005555555555bb in adjust (alpha=5.0000000000000002e-05) at lreg.cpp:105
#2  0x0000555555555760 in train (iterations=60000, alpha=5.0000000000000002e-05, N=3, stopsWhenStable=true) at lreg.cpp:138
#3  0x0000555555555acb in lreg (input=0x7fffffffe210 "/tmp/lreg/randInput") at lreg.cpp:173
#4  0x0000555555555e43 in main (argc=3, argv=0x7fffffffde68) at lreg.cpp:221

87		to the adjustment variable whose position in T is passed in pos
88	*/
89	double partialDerivate(int pos){
90		double pD = 0;
91		for(unsigned int i = 0; i<x.size(); i++){
92			pD += ((predict(x[i]) - y[i])*pow(x[i], pos));	
93		}
94		pD *= (2.0/x.size());
95		return pD;
96	}

Backtrace END
Fliping value of field: std::_Vector_base<double, std::allocator<double> >
Fliping value of field: _M_impl
Fliping value of field: _M_finish
Fliping a bit of the pointer
Memory content before bitflip:0xe00x680x770x550x550x550x000x00
Fault Model: Random bit-flip
base address to flip value: 0x555555761148 
address max offset: 8
Memory content after  bitflip:0x640x370x5f0x600x9b0xfd0xb50x4f
frame name: partialDerivate
symbol name: x
symbol filename: lreg.cpp
symbol line: 50
value: std::vector of length 717960239820634632, capacity 64 = {-16, 0, 9, -7, -16, 5, 11, -2, 15, -2, 22, -21, -4, -19, 13, -12, -22, 14, 14, 21, 24, -5, 21, 17, 27, -10, -20, 27, -14, -32, 17, -28, -6, -8, -18, 27, -16, 0, 9, -7, -16, 5, 11, -2, 15, -2, 22, -21, -4, -19, 13, -12, -22, 14, 14, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.6136072665001942e-321, 33, 1, -17, 15, 33, -9, -21, 5, -494, -1, -1033, -818, -19, -664, -376, -251, -901, -433, -433, -944, 69117, -628, 46302, 24562, 98412, -5003, -40003, 98412, -13723, -163843, 24562, -109763, -1083, -2563, -29163, 98412, 33, 1, -17, 15, 33, -9, -21, 5, -494, -1, -1033, -818, -19, -664, -376, -251, -901, -433, -433, -944, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.4209216646221081e-322, 4.6355706487978665e-310, -657.6318359375, 4.6355706487978665e-310, 5.3251152038574254, 4.6355706487982617e-310, 2.4209216646221081e-322, 4.6355706489275093e-310, -657.62643970204545, 3.578960068632421, 5.2748259440226626, 0, 2.4209216646221081e-322, 0, -657.6321221668868, 3.5781038908522569, 5.3251154726368881, 0, 5.5829417980060859e-322, 4.6355706488160481e-310, 4.6355706488176291e-310, 4.6355706488176291e-310, 4.6355706488626879e-310, 4.6355706488650594e-310, 4.6355706488650594e-310, 4.635570648793914e-310, 4.635570648797076e-310, 4.635570648797076e-310, 0, 0, 0, 0, 8.7449619313900638e-322, 4.6355706488113051e-310, 0, 4.6355706488113051e-310, 1.9762625833649862e-323, 4.6355706488117003e-310, 4.6355706488144671e-310, 0, 4.6355706488144671e-310, 2.9643938750474793e-323, 4.6355706488148623e-310, 4.6355706488563639e-310, 0, 4.6355706488563639e-310, 3.9525251667299724e-323, 4.6355706488567591e-310, 0, 0, 0, 0, 0, 0, 1.6304166312761136e-322, 4.6355706488010285e-310, 4.6355706488026095e-310, 4.6355706488026095e-310, 1.6304166312761136e-322, 54.461955838892436, 773.74565595937543, -0.99875345186416653, 1.6304166312761136e-322, 4.6355706489488529e-310, 773.71577363374297, -0.99900017926838791, 1.6304166312761136e-322, 0, 773.74565595937543...}
value address: 0x555555761140 <x>
Type: The type is a structure.
Type sizeof: 24
Field name: std::_Vector_base<double, std::allocator<double> >
Field Type: The type is a structure.
Field Type sizeof: 24

[INFO -- 2018-10-05 18:44:01]
Fault Injection Successful after 8.956024646759033s
[INFO -- 2018-10-05 18:44:02]
event type: exit
[EXCEPTION -- 2018-10-05 18:44:02]
exit code: no exit code available
