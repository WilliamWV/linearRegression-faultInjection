[INFO -- 2018-09-16 12:18:05]
Starting flip_value script
version: 1.1
[INFO -- 2018-09-16 12:18:05]
Initialization strings:
[INFO -- 2018-09-16 12:18:05]
(1) file /tmp/lreg/lreg
[INFO -- 2018-09-16 12:18:05]
(2) set args /tmp/lreg/randInput /tmp/lreg/output
[INFO -- 2018-09-16 12:18:05]
initSignal:0
[INFO -- 2018-09-16 12:18:05]
endSignal:2
[INFO -- 2018-09-16 12:18:05]
faultModel:1
[INFO -- 2018-09-16 12:18:06]
Backtrace BEGIN:
#0  0x0000555555555555 in adjust (alpha=5.0000000000000002e-05) at lreg.cpp:89
#1  0x00005555555556ac in train (iterations=60000, alpha=5.0000000000000002e-05, N=3, stopsWhenStable=true) at lreg.cpp:120
#2  0x0000555555555c26 in main (argc=3, argv=0x7fffffffde68) at lreg.cpp:182

84		
85		double PD;
86		for(int i = 0; i<T.size(); i++){
87			PD = partialDerivate(i);
88			// alpha is different from the canonical version because this works better
89			T[i]= T[i] - ((alpha / (sqrt( fabs(PD) ))) * PD); 
90		}
91	}
92	
93	/**

Backtrace END
Fliping value of field: std::_Vector_base<double, std::allocator<double> >
Fliping value of field: _M_impl
Fliping value of field: _M_start
Fliping a bit of the value pointed by a pointer
Memory content before bitflip:0x000x000x000x000x000x000xf00x3f
Fault Model: Double bit-flip
base address to flip value: 0x555555771650
address max offset: 8
Memory content after  bitflip:0x000x000x000x000x000x000xf00x9f
frame name: adjust
symbol name: y
symbol filename: lreg.cpp
symbol line: 33
value: std::vector of length 20, capacity 32 = {-7.4583407312002067e-155, 5, 3, -5, -7, -15, -31, -9, -1239, -1044, -615, 1, -1159, -1044, -1159, -319, -480, -1280, -1775, -224}
value address: 0x55555575a160 <y>
Type: The type is a structure.
Type sizeof: 24
Field name: std::_Vector_base<double, std::allocator<double> >
Field Type: The type is a structure.
Field Type sizeof: 24

[INFO -- 2018-09-16 12:18:06]
Fault Injection Successful after 1.3320701122283936s
[INFO -- 2018-09-16 12:18:12]
event type: exit
[INFO -- 2018-09-16 12:18:12]
exit code: 0
