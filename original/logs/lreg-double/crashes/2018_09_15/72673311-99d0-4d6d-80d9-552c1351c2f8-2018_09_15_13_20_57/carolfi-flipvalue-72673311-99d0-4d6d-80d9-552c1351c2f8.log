[INFO -- 2018-09-15 13:20:53]
Starting flip_value script
version: 1.1
[INFO -- 2018-09-15 13:20:53]
Initialization strings:
[INFO -- 2018-09-15 13:20:53]
(1) file /tmp/lreg/lreg
[INFO -- 2018-09-15 13:20:53]
(2) set args /tmp/lreg/randInput /tmp/lreg/output
[INFO -- 2018-09-15 13:20:53]
initSignal:0
[INFO -- 2018-09-15 13:20:53]
endSignal:2
[INFO -- 2018-09-15 13:20:53]
faultModel:1
[EXCEPTION -- 2018-09-15 13:20:54]
pythonException: empty range for randrange() (0,0, 0)
[EXCEPTION -- 2018-09-15 13:20:55]
pythonException: empty range for randrange() (0,0, 0)
[INFO -- 2018-09-15 13:20:55]
Backtrace BEGIN:
#0  std::vector<double, std::allocator<double> >::size (this=0x0) at /usr/include/c++/7/bits/stl_vector.h:670
#1  0x00005555555551f9 in predict (v=-9) at lreg.cpp:49
#2  0x00005555555553fc in partialDerivate (pos=1) at lreg.cpp:74
#3  0x0000555555555503 in adjust (alpha=5.0000000000000002e-05) at lreg.cpp:87
#4  0x00005555555556ac in train (iterations=60000, alpha=5.0000000000000002e-05, N=3, stopsWhenStable=true) at lreg.cpp:120
#5  0x0000555555555c26 in main (argc=3, argv=0x7fffffffde68) at lreg.cpp:182

665	#endif
666	
667	      // [23.2.4.2] capacity
668	      /**  Returns the number of elements in the %vector.  */
669	      size_type
670	      size() const _GLIBCXX_NOEXCEPT
671	      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
672	
673	      /**  Returns the size() of the largest possible %vector.  */
674	      size_type

Backtrace END
Fliping value of field: std::_Vector_base<double, std::allocator<double> >
Fliping value of field: _M_impl
Fliping value of field: _M_start
Fliping a bit of the value pointed by a pointer
Memory content before bitflip:0x000x000x000x000x000x100x400x00
Fault Model: Double bit-flip
base address to flip value: 0x555555771561
address max offset: 8
Memory content after  bitflip:0x000x000x000x000x000x100x010x00
frame name: main
symbol name: x
symbol filename: lreg.cpp
symbol line: 32
value: std::vector of length 15, capacity 27 = {1.4775881091649384e-309, 4.6036778132513997e-305, 1.7939657984214311e-307, 4.5836521485248348e-305, 1.7991808152773074e-307, 4.5947775178173709e-305, 4.574751853090806e-305, 4.6136906456146821e-305, 1.8000499847532867e-307, 4.6136906456146821e-305, 4.6081279609684141e-305, 4.5970025916758781e-305, 4.6059028871099069e-305, 4.5925524439588637e-305, 4.5970025916758781e-305, 4.6036778132513997e-305, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8.4425425152863546e-227, 4.9406564584124654e-324, 4.6036778132513997e-305, 1.7765824089018436e-307, 4.6114655717561749e-305, 1.7991808152773074e-307, 1.7835357647096786e-307, 4.6059028871099069e-305, 1.7922274594694724e-307, 4.5881022962418493e-305, 1.8391626111723586e-307, 1.8307696934199328e-307, 1.815043158213931e-307, 1.845606687990362e-307, 1.8407244000745091e-307, 1.845606687990362e-307, 1.8411318232663744e-307, 1.8328611324715082e-307, 1.8395428728180996e-307, 1.8288955467373523e-307, 1.8328611324715082e-307, 1.8380625685543222e-307, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.131959884853339e-72, 8.3003028501329419e-322, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0...}
value address: 0x55555575a140 <x>
Type: The type is a structure.
Type sizeof: 24
Field name: std::_Vector_base<double, std::allocator<double> >
Field Type: The type is a structure.
Field Type sizeof: 24

[INFO -- 2018-09-15 13:20:55]
Fault Injection Successful after 2.7010409832000732s
[INFO -- 2018-09-15 13:20:56]
event type: exit
[EXCEPTION -- 2018-09-15 13:20:56]
exit code: no exit code available
