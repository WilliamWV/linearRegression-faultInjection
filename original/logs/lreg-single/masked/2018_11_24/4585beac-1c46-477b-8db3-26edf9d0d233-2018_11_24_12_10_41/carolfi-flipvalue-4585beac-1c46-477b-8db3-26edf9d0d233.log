[INFO -- 2018-11-24 12:10:36]
Starting flip_value script
version: 1.1
[INFO -- 2018-11-24 12:10:36]
Initialization strings:
[INFO -- 2018-11-24 12:10:36]
(1) file /tmp/lreg/lreg
[INFO -- 2018-11-24 12:10:36]
(2) set args /tmp/lreg/randInput /tmp/lreg/output
[INFO -- 2018-11-24 12:10:36]
initSignal:0
[INFO -- 2018-11-24 12:10:36]
endSignal:2
[INFO -- 2018-11-24 12:10:36]
faultModel:0
[INFO -- 2018-11-24 12:10:37]
Backtrace BEGIN:
#0  0x00005555555554b8 in adjust (alpha=0.00020000000000000001) at lreg.cpp:87
#1  0x000055555555565c in train (iterations=10000, alpha=0.00020000000000000001, N=2, stopsWhenStable=true) at lreg.cpp:120
#2  0x0000555555555ab7 in main (argc=3, argv=0x7fffffffde58) at lreg.cpp:174

82	*/
83	void adjust(double alpha){
84		
85		double PD;
86		for(int i = 0; i<T.size(); i++){
87			PD = partialDerivate(i);
88			// alpha is different from the canonical version because this works better
89			T[i]= T[i] - ((alpha / (sqrt( fabs(PD) ))) * PD); 
90		}
91	}

Backtrace END
Fliping value of field: std::_Vector_base<double, std::allocator<double> >
Fliping value of field: _M_impl
Fliping value of field: _M_finish
Fliping a bit of the value pointed by a pointer
Memory content before bitflip:0x000x000x000x000x000x000x000x00
Fault Model: Single bit-flip
base address to flip value: 0x555555771350
address max offset: 8
Memory content after  bitflip:0x400x000x000x000x000x000x000x00
frame name: main
symbol name: T
symbol filename: lreg.cpp
symbol line: 34
value: std::vector of length 2, capacity 2 = {1.3604888310417282, -1.0165621884707803}
value address: 0x55555575a180 <T>
Type: The type is a structure.
Type sizeof: 24
Field name: std::_Vector_base<double, std::allocator<double> >
Field Type: The type is a structure.
Field Type sizeof: 24

[INFO -- 2018-11-24 12:10:37]
Fault Injection Successful after 1.679002285003662s
[INFO -- 2018-11-24 12:10:40]
event type: exit
[INFO -- 2018-11-24 12:10:40]
exit code: 0
