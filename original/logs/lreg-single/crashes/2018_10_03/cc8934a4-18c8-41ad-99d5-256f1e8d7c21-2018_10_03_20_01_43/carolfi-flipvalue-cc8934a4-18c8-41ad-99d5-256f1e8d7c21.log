[INFO -- 2018-10-03 20:01:41]
Starting flip_value script
version: 1.1
[INFO -- 2018-10-03 20:01:41]
Initialization strings:
[INFO -- 2018-10-03 20:01:41]
(1) file /tmp/lreg/lreg
[INFO -- 2018-10-03 20:01:41]
(2) set args /tmp/lreg/randInput /tmp/lreg/output
[INFO -- 2018-10-03 20:01:41]
initSignal:0
[INFO -- 2018-10-03 20:01:41]
endSignal:10
[INFO -- 2018-10-03 20:01:41]
faultModel:0
[EXCEPTION -- 2018-10-03 20:01:42]
pythonException: Unable to exit loop in struct fields; Exiting wihtout making a bit flip
[INFO -- 2018-10-03 20:01:43]
Backtrace BEGIN:
#0  std::_Vector_base<double, std::allocator<double> >::~_Vector_base (this=0x7fffffffd880, __in_chrg=<optimized out>) at /usr/include/c++/7/bits/stl_vector.h:162
#1  0x0000555555555e3b in std::vector<double, std::allocator<double> >::~vector (this=0x7fffffffd880, __in_chrg=<optimized out>) at /usr/include/c++/7/bits/stl_vector.h:435
#2  0x0000555555555720 in train (iterations=60000, alpha=5.0000000000000002e-05, N=3, stopsWhenStable=true) at lreg.cpp:126
#3  0x0000555555555ab7 in main (argc=3, argv=0x7fffffffde58) at lreg.cpp:174

157		  }
158	      }
159	#endif
160	
161	      ~_Vector_base() _GLIBCXX_NOEXCEPT
162	      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
163			      - this->_M_impl._M_start); }
164	
165	    public:
166	      _Vector_impl _M_impl;

Backtrace END
Fliping a bit of the pointer
Memory content before bitflip:0x800xd80xff0xff0xff0x7f0x000x00
Fault Model: Single bit-flip
base address to flip value: 0x7fffffffd7c8
address max offset: 8
Memory content after  bitflip:0x800xd80xef0xff0xff0x7f0x000x00
frame name: std::_Vector_base<double, std::allocator<double> >::~_Vector_base
symbol name: this
symbol filename: lreg.cpp
symbol line: 0
value: 0x7fffffffd880
value address: 0x7fffffffd7c8
Type: The type is a pointer.
Type sizeof: 8

[INFO -- 2018-10-03 20:01:43]
Fault Injection Successful after 2.0080816745758057s
[INFO -- 2018-10-03 20:01:43]
event type: exit
[EXCEPTION -- 2018-10-03 20:01:43]
exit code: no exit code available
