[INFO -- 2018-11-22 14:52:12]
Starting flip_value script
version: 1.1
[INFO -- 2018-11-22 14:52:12]
Initialization strings:
[INFO -- 2018-11-22 14:52:12]
(1) file /tmp/lreg/lreg
[INFO -- 2018-11-22 14:52:12]
(2) set args /tmp/lreg/randInput /tmp/lreg/output
[INFO -- 2018-11-22 14:52:12]
initSignal:0
[INFO -- 2018-11-22 14:52:12]
endSignal:3
[INFO -- 2018-11-22 14:52:12]
faultModel:0
[INFO -- 2018-11-22 14:52:13]
Backtrace BEGIN:
#0  0x0000555555555122 in equals (a=std::vector of length 3, capacity 3 = {...}, b=std::vector of length 3, capacity 3 = {...}) at lreg.cpp:39
#1  0x00005555555556f4 in train (iterations=20000, alpha=5.0000000000000002e-05, N=3, stopsWhenStable=true) at lreg.cpp:126
#2  0x0000555555555ab7 in main (argc=3, argv=0x7fffffffde58) at lreg.cpp:174

34	vector<double> T; // the adjustment variables
35	
36	bool equals(vector<double> a, vector<double> b){
37		if (a.size() != b.size()) return false;
38		for (int i = 0; i<a.size(); i++){
39			if(a[i] != b[i]) return false;
40		}
41		return true;
42	}
43	

Backtrace END
Fliping value of field: std::_Vector_base<double, std::allocator<double> >
Fliping value of field: _M_impl
Fliping value of field: _M_end_of_storage
Fliping a bit of the value pointed by a pointer
Memory content before bitflip:0x910x000x000x000x000x000x000x00
Fault Model: Single bit-flip
base address to flip value: 0x5555557714a8
address max offset: 8
Memory content after  bitflip:0x910x000x000x000x010x000x000x00
frame name: equals
symbol name: a
symbol filename: lreg.cpp
symbol line: 36
value: std::vector of length 3, capacity 3 = {1.0305000914743501, -0.025463891865480016, -2.9925754863686853}
value address: 0x7fffffffd880
Type: The type is a structure.
Type sizeof: 24
Field name: std::_Vector_base<double, std::allocator<double> >
Field Type: The type is a structure.
Field Type sizeof: 24

[INFO -- 2018-11-22 14:52:13]
Fault Injection Successful after 1.7613060474395752s
[INFO -- 2018-11-22 14:52:16]
event type: exit
[EXCEPTION -- 2018-11-22 14:52:16]
exit code: no exit code available
