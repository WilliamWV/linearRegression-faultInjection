[INFO -- 2018-10-02 17:45:17]
Starting flip_value script
version: 1.1
[INFO -- 2018-10-02 17:45:17]
Initialization strings:
[INFO -- 2018-10-02 17:45:18]
(1) file /tmp/lreg/lreg
[INFO -- 2018-10-02 17:45:18]
(2) set args /tmp/lreg/randInput /tmp/lreg/output
[INFO -- 2018-10-02 17:45:18]
initSignal:0
[INFO -- 2018-10-02 17:45:18]
endSignal:10
[INFO -- 2018-10-02 17:45:18]
faultModel:0
[INFO -- 2018-10-02 17:45:18]
Backtrace BEGIN:
#0  0x00005555555554b3 in adjust (alpha=5.0000000000000002e-05) at lreg.cpp:87
#1  0x000055555555565c in train (iterations=60000, alpha=5.0000000000000002e-05, N=3, stopsWhenStable=true) at lreg.cpp:120
#2  0x0000555555555ab7 in main (argc=3, argv=0x7fffffffde58) at lreg.cpp:174

82	*/
83	void adjust(double alpha){
84		
85		double PD;
86		for(int i = 0; i<T.size(); i++){
87			PD = partialDerivate(i);
88			// alpha is different from the canonical version because this works better
89			T[i]= T[i] - ((alpha / (sqrt( fabs(PD) ))) * PD); 
90		}
91	}

Backtrace END
Fliping value of field: std::_Vector_base<double, std::allocator<double> >
Fliping value of field: _M_impl
Fliping value of field: _M_end_of_storage
Fliping a bit of the value pointed by a pointer
Memory content before bitflip:0x310x000x000x000x000x000x000x00
Fault Model: Single bit-flip
base address to flip value: 0x555555771378
address max offset: 8
Memory content after  bitflip:0x310x000x000x000x040x000x000x00
frame name: adjust
symbol name: T
symbol filename: lreg.cpp
symbol line: 34
value: std::vector of length 3, capacity 3 = {0.20737564710818121, -0.49706490994712293, -3.7099702721196866}
value address: 0x55555575a180 <T>
Type: The type is a structure.
Type sizeof: 24
Field name: std::_Vector_base<double, std::allocator<double> >
Field Type: The type is a structure.
Field Type sizeof: 24

[INFO -- 2018-10-02 17:45:18]
Fault Injection Successful after 0.6970889568328857s
[INFO -- 2018-10-02 17:45:25]
event type: exit
[EXCEPTION -- 2018-10-02 17:45:25]
exit code: no exit code available
