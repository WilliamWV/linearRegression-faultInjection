[INFO -- 2018-09-06 18:56:19]
Starting flip_value script
version: 1.1
[INFO -- 2018-09-06 18:56:19]
Initialization strings:
[INFO -- 2018-09-06 18:56:19]
(1) file /tmp/lreg/lreg
[INFO -- 2018-09-06 18:56:19]
(2) set args /tmp/lreg/randInput /tmp/lreg/output
[INFO -- 2018-09-06 18:56:19]
initSignal:0
[INFO -- 2018-09-06 18:56:19]
endSignal:2
[INFO -- 2018-09-06 18:56:19]
faultModel:0
[EXCEPTION -- 2018-09-06 18:56:20]
gdbException: Cannot access memory at address 0x1555555771360
[INFO -- 2018-09-06 18:56:21]
Backtrace BEGIN:
#0  0x0000555555555ecc in std::vector<double, std::allocator<double> >::size (this=0x5c233ea282fdd000) at /usr/include/c++/7/bits/stl_vector.h:670
#1  0x00005555555560fa in std::vector<double, std::allocator<double> >::vector (this=0x7fffffffd8b0, __x=std::vector of length 3, capacity 3 = {...}) at /usr/include/c++/7/bits/stl_vector.h:328
#2  0x0000555555555713 in train (iterations=60000, alpha=5.0000000000000002e-05, N=3, stopsWhenStable=true) at lreg.cpp:126
#3  0x0000555555555c26 in main (argc=3, argv=0x7fffffffde68) at lreg.cpp:182

665	#endif
666	
667	      // [23.2.4.2] capacity
668	      /**  Returns the number of elements in the %vector.  */
669	      size_type
670	      size() const _GLIBCXX_NOEXCEPT
671	      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
672	
673	      /**  Returns the size() of the largest possible %vector.  */
674	      size_type

Backtrace END
Memory content before bitflip:0x000x000x000x000x000x000x660xc0
Fault Model: Single bit-flip
base address to flip value: 0x7fffffffd958
address max offset: 8
Memory content after  bitflip:0x000x000x000x000x000x040x660xc0
frame name: main
symbol name: temp
symbol filename: lreg.cpp
symbol line: 168
value: -176.125
value address: 0x7fffffffd958
Type: A floating point type.
Type sizeof: 8

[INFO -- 2018-09-06 18:56:21]
Fault Injection Successful after 2.222323179244995s
[INFO -- 2018-09-06 18:56:21]
event type: exit
[EXCEPTION -- 2018-09-06 18:56:21]
exit code: no exit code available
