[INFO -- 2018-09-25 18:03:37]
Starting flip_value script
version: 1.1
[INFO -- 2018-09-25 18:03:37]
Initialization strings:
[INFO -- 2018-09-25 18:03:37]
(1) file /tmp/lreg/lreg
[INFO -- 2018-09-25 18:03:37]
(2) set args /tmp/lreg/randInput /tmp/lreg/output
[INFO -- 2018-09-25 18:03:37]
initSignal:0
[INFO -- 2018-09-25 18:03:37]
endSignal:2
[INFO -- 2018-09-25 18:03:37]
faultModel:0
[EXCEPTION -- 2018-09-25 18:03:37]
pythonException: Unable to exit loop in struct fields; Exiting wihtout making a bit flip
[INFO -- 2018-09-25 18:03:37]
Backtrace BEGIN:
#0  0x00007ffff76b7b0a in __pow (x=13, y=0) at w_pow_compat.c:30
#1  0x0000555555555f39 in std::pow<double, int> (__x=13, __y=0) at /usr/include/c++/7/cmath:418
#2  0x0000555555555237 in predict (v=13) at lreg.cpp:50
#3  0x00005555555552ba in meanSquaredError () at lreg.cpp:61
#4  0x00005555555556b1 in train (iterations=30000, alpha=0.00020000000000000001, N=2, stopsWhenStable=true) at lreg.cpp:121
#5  0x0000555555555c26 in main (argc=3, argv=0x7fffffffde68) at lreg.cpp:182

25	in w_pow_compat.c

Backtrace END
Fliping value of field: std::_Vector_base<double, std::allocator<double> >
Fliping value of field: _M_impl
Fliping value of field: _M_end_of_storage
Fliping a bit of the pointer
Memory content before bitflip:0x300x130x770x550x550x550x000x00
Fault Model: Single bit-flip
base address to flip value: 0x55555575a150 
address max offset: 8
Memory content after  bitflip:0x300x130x770x550x550x540x000x00
frame name: meanSquaredError
symbol name: x
symbol filename: lreg.cpp
symbol line: 32
value: std::vector of length 8, capacity -137438953464 = {-11, 13, 8, -14, 14, 9, -2, 2}
value address: 0x55555575a140 <x>
Type: The type is a structure.
Type sizeof: 24
Field name: std::_Vector_base<double, std::allocator<double> >
Field Type: The type is a structure.
Field Type sizeof: 24

[INFO -- 2018-09-25 18:03:37]
Fault Injection Successful after 0.9940385818481445s
[INFO -- 2018-09-25 18:03:38]
event type: exit
[EXCEPTION -- 2018-09-25 18:03:38]
exit code: no exit code available
