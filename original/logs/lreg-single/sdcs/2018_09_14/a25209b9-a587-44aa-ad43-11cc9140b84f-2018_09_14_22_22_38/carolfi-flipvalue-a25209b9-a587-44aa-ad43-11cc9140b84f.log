[INFO -- 2018-09-14 22:22:29]
Starting flip_value script
version: 1.1
[INFO -- 2018-09-14 22:22:29]
Initialization strings:
[INFO -- 2018-09-14 22:22:29]
(1) file /tmp/lreg/lreg
[INFO -- 2018-09-14 22:22:29]
(2) set args /tmp/lreg/randInput /tmp/lreg/output
[INFO -- 2018-09-14 22:22:29]
initSignal:0
[INFO -- 2018-09-14 22:22:29]
endSignal:2
[INFO -- 2018-09-14 22:22:29]
faultModel:0
[EXCEPTION -- 2018-09-14 22:22:31]
pythonException: Unable to exit loop in struct fields; Exiting wihtout making a bit flip
[INFO -- 2018-09-14 22:22:31]
Backtrace BEGIN:
#0  0x0000555555555ee8 in std::vector<double, std::allocator<double> >::size (this=0x55555575a180 <T>) at /usr/include/c++/7/bits/stl_vector.h:671
#1  0x00005555555551f9 in predict (v=-10) at lreg.cpp:49
#2  0x00005555555553fc in partialDerivate (pos=0) at lreg.cpp:74
#3  0x0000555555555503 in adjust (alpha=2.2222199999999999e-05) at lreg.cpp:87
#4  0x00005555555556ac in train (iterations=90000, alpha=2.2222199999999999e-05, N=4, stopsWhenStable=true) at lreg.cpp:120
#5  0x0000555555555c26 in main (argc=3, argv=0x7fffffffde68) at lreg.cpp:182

666	
667	      // [23.2.4.2] capacity
668	      /**  Returns the number of elements in the %vector.  */
669	      size_type
670	      size() const _GLIBCXX_NOEXCEPT
671	      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
672	
673	      /**  Returns the size() of the largest possible %vector.  */
674	      size_type
675	      max_size() const _GLIBCXX_NOEXCEPT

Backtrace END
Memory content before bitflip:0x080x000x000x00
Fault Model: Single bit-flip
base address to flip value: 0x7fffffffd93c
address max offset: 4
Memory content after  bitflip:0x080x040x000x00
frame name: main
symbol name: predictions
symbol filename: lreg.cpp
symbol line: 169
value: 1032
value address: 0x7fffffffd93c
Type: The type is an integer type.
Type sizeof: 4

[INFO -- 2018-09-14 22:22:31]
Fault Injection Successful after 2.7437517642974854s
[INFO -- 2018-09-14 22:22:37]
event type: exit
[INFO -- 2018-09-14 22:22:37]
exit code: 0
