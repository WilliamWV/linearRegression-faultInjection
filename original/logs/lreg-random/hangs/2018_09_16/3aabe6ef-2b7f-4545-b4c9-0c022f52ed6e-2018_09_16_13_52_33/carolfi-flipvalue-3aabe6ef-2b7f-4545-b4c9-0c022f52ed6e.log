[INFO -- 2018-09-16 13:52:13]
Starting flip_value script
version: 1.1
[INFO -- 2018-09-16 13:52:13]
Initialization strings:
[INFO -- 2018-09-16 13:52:13]
(1) file /tmp/lreg/lreg
[INFO -- 2018-09-16 13:52:13]
(2) set args /tmp/lreg/randInput /tmp/lreg/output
[INFO -- 2018-09-16 13:52:13]
initSignal:0
[INFO -- 2018-09-16 13:52:13]
endSignal:2
[INFO -- 2018-09-16 13:52:13]
faultModel:2
[EXCEPTION -- 2018-09-16 13:52:14]
gdbException: Attempt to dereference a generic pointer.
[INFO -- 2018-09-16 13:52:15]
Backtrace BEGIN:
#0  0x0000555555555543 in adjust (alpha=0.00020000000000000001) at lreg.cpp:89
#1  0x00005555555556ac in train (iterations=30000, alpha=0.00020000000000000001, N=2, stopsWhenStable=true) at lreg.cpp:120
#2  0x0000555555555c26 in main (argc=3, argv=0x7fffffffde68) at lreg.cpp:182

84		
85		double PD;
86		for(int i = 0; i<T.size(); i++){
87			PD = partialDerivate(i);
88			// alpha is different from the canonical version because this works better
89			T[i]= T[i] - ((alpha / (sqrt( fabs(PD) ))) * PD); 
90		}
91	}
92	
93	/**

Backtrace END
Fliping value of field: std::_Vector_base<double, std::allocator<double> >
Fliping value of field: _M_impl
Fliping value of field: _M_finish
Fliping a bit of the value pointed by a pointer
Memory content before bitflip:0x000x000x000x000x000x000x000x00
Fault Model: Random bit-flip
base address to flip value: 0x555555771350
address max offset: 8
Memory content after  bitflip:0x000xdd0xe50x9e0xe40x1b0x300xd8
frame name: main
symbol name: T
symbol filename: lreg.cpp
symbol line: 34
value: std::vector of length 2, capacity 2 = {0.80010699065197055, 1.9823883371667699}
value address: 0x55555575a180 <T>
Type: The type is a structure.
Type sizeof: 24
Field name: std::_Vector_base<double, std::allocator<double> >
Field Type: The type is a structure.
Field Type sizeof: 24

[INFO -- 2018-09-16 13:52:15]
Fault Injection Successful after 2.18929386138916s
[INFO -- 2018-09-16 13:52:32]
event type: exit
[INFO -- 2018-09-16 13:52:32]
exit code: 0
