[INFO -- 2018-11-22 17:13:20]
Starting flip_value script
version: 1.1
[INFO -- 2018-11-22 17:13:20]
Initialization strings:
[INFO -- 2018-11-22 17:13:20]
(1) file /tmp/lreg/lreg
[INFO -- 2018-11-22 17:13:20]
(2) set args /tmp/lreg/randInput /tmp/lreg/output
[INFO -- 2018-11-22 17:13:20]
initSignal:0
[INFO -- 2018-11-22 17:13:20]
endSignal:3
[INFO -- 2018-11-22 17:13:20]
faultModel:2
[EXCEPTION -- 2018-11-22 17:13:22]
gdbException: Attempt to dereference a generic pointer.
[INFO -- 2018-11-22 17:13:22]
Backtrace BEGIN:
#0  0x00005555555554f3 in adjust (alpha=5.0000000000000002e-05) at lreg.cpp:89
#1  0x000055555555565c in train (iterations=20000, alpha=5.0000000000000002e-05, N=3, stopsWhenStable=true) at lreg.cpp:120
#2  0x0000555555555ab7 in main (argc=3, argv=0x7fffffffde58) at lreg.cpp:174

84		
85		double PD;
86		for(int i = 0; i<T.size(); i++){
87			PD = partialDerivate(i);
88			// alpha is different from the canonical version because this works better
89			T[i]= T[i] - ((alpha / (sqrt( fabs(PD) ))) * PD); 
90		}
91	}
92	
93	/**

Backtrace END
Fliping value of field: std::_Vector_base<double, std::allocator<double> >
Fliping value of field: _M_impl
Fliping value of field: _M_end_of_storage
Fliping a bit of the value pointed by a pointer
Memory content before bitflip:0x000x000x000x000x000x000x000x00
Fault Model: Random bit-flip
base address to flip value: 0x5555557715c0
address max offset: 8
Memory content after  bitflip:0x570xb60x060xb80x4f0x1b0x7b0x1d
frame name: main
symbol name: y
symbol filename: lreg.cpp
symbol line: 33
value: std::vector of length 12, capacity 16 = {-44, -23, -143, -8, 1, 1, -1319, -23, -1079, -503, -104, -1583}
value address: 0x55555575a160 <y>
Type: The type is a structure.
Type sizeof: 24
Field name: std::_Vector_base<double, std::allocator<double> >
Field Type: The type is a structure.
Field Type sizeof: 24

[INFO -- 2018-11-22 17:13:22]
Fault Injection Successful after 2.6046364307403564s
[INFO -- 2018-11-22 17:13:25]
event type: exit
[INFO -- 2018-11-22 17:13:25]
exit code: 0
