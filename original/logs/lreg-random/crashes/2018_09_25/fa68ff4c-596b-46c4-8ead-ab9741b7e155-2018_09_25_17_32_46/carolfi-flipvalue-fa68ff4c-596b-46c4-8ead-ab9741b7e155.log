[INFO -- 2018-09-25 17:32:43]
Starting flip_value script
version: 1.1
[INFO -- 2018-09-25 17:32:43]
Initialization strings:
[INFO -- 2018-09-25 17:32:43]
(1) file /tmp/lreg/lreg
[INFO -- 2018-09-25 17:32:43]
(2) set args /tmp/lreg/randInput /tmp/lreg/output
[INFO -- 2018-09-25 17:32:43]
initSignal:0
[INFO -- 2018-09-25 17:32:43]
endSignal:2
[INFO -- 2018-09-25 17:32:43]
faultModel:2
[EXCEPTION -- 2018-09-25 17:32:45]
pythonException: empty range for randrange() (0,0, 0)
[INFO -- 2018-09-25 17:32:45]
Backtrace BEGIN:
#0  0x0000555555556839 in std::vector<double, std::allocator<double> >::begin (this=0x7fffffffd850) at /usr/include/c++/7/bits/stl_vector.h:573
#1  0x000055555555614c in std::vector<double, std::allocator<double> >::vector (this=0x7fffffffd8b0, __x=std::vector of length 15, capacity 15 = {...}) at /usr/include/c++/7/bits/stl_vector.h:331
#2  0x0000555555555713 in train (iterations=90000, alpha=2.2222199999999999e-05, N=4, stopsWhenStable=true) at lreg.cpp:126
#3  0x0000555555555c26 in main (argc=3, argv=0x7fffffffde68) at lreg.cpp:182

568	       *  first element in the %vector.  Iteration is done in ordinary
569	       *  element order.
570	       */
571	      const_iterator
572	      begin() const _GLIBCXX_NOEXCEPT
573	      { return const_iterator(this->_M_impl._M_start); }
574	
575	      /**
576	       *  Returns a read/write iterator that points one past the last
577	       *  element in the %vector.  Iteration is done in ordinary

Backtrace END
Memory content before bitflip:0x900x5f0x010x00
Fault Model: Random bit-flip
base address to flip value: 0x7fffffffd82c
address max offset: 4
Memory content after  bitflip:0x4e0xcf0xe90x83
frame name: train
symbol name: iterations
symbol filename: lreg.cpp
symbol line: 105
value: -2081829042
value address: 0x7fffffffd82c
Type: The type is an integer type.
Type sizeof: 4

[INFO -- 2018-09-25 17:32:45]
Fault Injection Successful after 2.359569549560547s
[INFO -- 2018-09-25 17:32:45]
event type: exit
[EXCEPTION -- 2018-09-25 17:32:45]
exit code: no exit code available
