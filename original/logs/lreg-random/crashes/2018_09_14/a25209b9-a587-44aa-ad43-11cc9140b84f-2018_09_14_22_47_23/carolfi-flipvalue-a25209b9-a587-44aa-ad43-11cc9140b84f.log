[INFO -- 2018-09-14 22:47:21]
Starting flip_value script
version: 1.1
[INFO -- 2018-09-14 22:47:21]
Initialization strings:
[INFO -- 2018-09-14 22:47:21]
(1) file /tmp/lreg/lreg
[INFO -- 2018-09-14 22:47:21]
(2) set args /tmp/lreg/randInput /tmp/lreg/output
[INFO -- 2018-09-14 22:47:21]
initSignal:0
[INFO -- 2018-09-14 22:47:21]
endSignal:2
[INFO -- 2018-09-14 22:47:21]
faultModel:2
[EXCEPTION -- 2018-09-14 22:47:22]
pythonException: empty range for randrange() (0,0, 0)
[INFO -- 2018-09-14 22:47:22]
Backtrace BEGIN:
#0  0x0000555555555f2b in std::pow<double, int> (__x=5, __y=0) at /usr/include/c++/7/cmath:418
#1  0x0000555555555237 in predict (v=5) at lreg.cpp:50
#2  0x00005555555553fc in partialDerivate (pos=0) at lreg.cpp:74
#3  0x0000555555555503 in adjust (alpha=0.00020000000000000001) at lreg.cpp:87
#4  0x00005555555556ac in train (iterations=30000, alpha=0.00020000000000000001, N=2, stopsWhenStable=true) at lreg.cpp:120
#5  0x0000555555555c26 in main (argc=3, argv=0x7fffffffde68) at lreg.cpp:182

413	    inline _GLIBCXX_CONSTEXPR
414	    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
415	    pow(_Tp __x, _Up __y)
416	    {
417	      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
418	      return pow(__type(__x), __type(__y));
419	    }
420	
421	  using ::sin;
422	

Backtrace END
Fliping value of field: std::_Vector_base<double, std::allocator<double> >
Fliping value of field: _M_impl
Fliping value of field: _M_end_of_storage
Fliping a bit of the value pointed by a pointer
Memory content before bitflip:0x000x000x000x000x000x000x000x00
Fault Model: Random bit-flip
base address to flip value: 0x555555771330
address max offset: 8
Memory content after  bitflip:0x490xe60x370x1d0x490x1b0x080x58
frame name: std::pow<double, int>
symbol name: x
symbol filename: lreg.cpp
symbol line: 32
value: std::vector of length 9, capacity 9 = {4.4001704721455887e-310, 0, 4.0780448798402136e-312, 1.3610613627988192e-312, 0, 1.3597351154294659e-312, 1.3597351154294659e-312, 1.3603982391141425e-312, 4.0772159752343678e-312, 2.0466579766976716e-39, 1.8113423267530785e-310, 2.0926587347018196e-175, 9.1592089652252701e-120, 1.3567510605875321e-312, 1.7926620442074621e-310, 2.0926587347018196e-175, 9.1592089652252701e-120, 1.3567510605875321e-312, 2.6618315201868376e-310, 0, 0, 1.36089558187765e-312, 4.0729056712839695e-312, 1.3594035535871276e-312, 4.4001704721455887e-310, 0, 4.0782106607613827e-312, 1.36089558187765e-312, 4.0729056712839695e-312, 1.3594035535871276e-312, 1.3594035535871276e-312, 1.3600666772718042e-312, 4.0773817561555369e-312, 0, 4.4001704721455887e-310, 0, 1.7383389519587511e-310, -nan(0xfff0000000000), 1.1452250397540282e-72, 0, 0, 0, 0, 0, 1.7926620442074621e-310, 4.9665722205265046e+265, 2.6120688068382365e+209, 1.3567510553652582e-312, 1.7926620442074621e-310, 4.1439271150501696e+265, -6.0489106418818372e-70, 1.3567510553652582e-312, 1.7926620442074621e-310, 0, 9.1580747861319425e-120, 1.3567510605875321e-312, 1.9494428342846218e-305, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0...}
value address: 0x55555575a140 <x>
Type: The type is a structure.
Type sizeof: 24
Field name: std::_Vector_base<double, std::allocator<double> >
Field Type: The type is a structure.
Field Type sizeof: 24

[INFO -- 2018-09-14 22:47:22]
Fault Injection Successful after 1.8203623294830322s
[INFO -- 2018-09-14 22:47:23]
event type: exit
[EXCEPTION -- 2018-09-14 22:47:23]
exit code: no exit code available
